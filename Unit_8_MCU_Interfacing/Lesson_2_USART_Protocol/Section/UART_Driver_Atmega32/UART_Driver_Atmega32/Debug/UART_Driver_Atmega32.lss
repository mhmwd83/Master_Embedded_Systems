
UART_Driver_Atmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000872  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000008e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800060  00800060  000008e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000918  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dd1  00000000  00000000  000009fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000784  00000000  00000000  000017cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d6  00000000  00000000  00001f51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000130  00000000  00000000  00002728  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a1  00000000  00000000  00002858  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005cd  00000000  00000000  000030f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  000036c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ab 36       	cpi	r26, 0x6B	; 107
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  74:	0c 94 37 04 	jmp	0x86e	; 0x86e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <LCD_KICK>:
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
}

void LCD_KICK(void)
{
	LCD_CTRL &= ~(1<<E_PIN);
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	87 7f       	andi	r24, 0xF7	; 247
  80:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  82:	83 ed       	ldi	r24, 0xD3	; 211
  84:	90 e3       	ldi	r25, 0x30	; 48
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <LCD_KICK+0xa>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <LCD_KICK+0x10>
  8c:	00 00       	nop
	_delay_ms(50);
	LCD_CTRL |=(1<<E_PIN);
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	88 60       	ori	r24, 0x08	; 8
  92:	88 bb       	out	0x18, r24	; 24
  94:	08 95       	ret

00000096 <LCD_WRITE_CHAR>:
	LCD_KICK();
	#endif
}

void LCD_WRITE_CHAR(unsigned char character)
{
  96:	cf 93       	push	r28
  98:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_PORT = (LCD_PORT & 0x0F) | (character & 0xF0);
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8f 70       	andi	r24, 0x0F	; 15
  9e:	9c 2f       	mov	r25, r28
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	89 2b       	or	r24, r25
  a4:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
  a6:	88 b3       	in	r24, 0x18	; 24
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
  ac:	88 b3       	in	r24, 0x18	; 24
  ae:	8b 7f       	andi	r24, 0xFB	; 251
  b0:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  b2:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (character << 4);
  b6:	2b b3       	in	r18, 0x1b	; 27
  b8:	30 e1       	ldi	r19, 0x10	; 16
  ba:	c3 9f       	mul	r28, r19
  bc:	c0 01       	movw	r24, r0
  be:	11 24       	eor	r1, r1
  c0:	92 2f       	mov	r25, r18
  c2:	9f 70       	andi	r25, 0x0F	; 15
  c4:	89 2b       	or	r24, r25
  c6:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL |= (1<<RS_PIN); // Turn RS ON for data mode
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	82 60       	ori	r24, 0x02	; 2
  cc:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RW_PIN); // Turn RW OFF for write mode
  ce:	88 b3       	in	r24, 0x18	; 24
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  d4:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_KICK>
	#endif
}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <LCD_ISBUSY>:
	LCD_CTRL |=(1<<E_PIN);
}

void LCD_ISBUSY(void)
{
	DataDir_LCD_PORT = 0x00; //	Input Mode
  dc:	1a ba       	out	0x1a, r1	; 26
	LCD_CTRL |= (1<<RW_PIN); // Read mode // ON
  de:	88 b3       	in	r24, 0x18	; 24
  e0:	84 60       	ori	r24, 0x04	; 4
  e2:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL &= ~(1<<RS_PIN);// Read Mode // OFF
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
  ea:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_KICK>
	DataDir_LCD_PORT = 0xFF;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	8a bb       	out	0x1a, r24	; 26
	LCD_CTRL &= ~(1<<RW_PIN);
  f2:	88 b3       	in	r24, 0x18	; 24
  f4:	8b 7f       	andi	r24, 0xFB	; 251
  f6:	88 bb       	out	0x18, r24	; 24
  f8:	08 95       	ret

000000fa <LCD_WRITE_COMMAND>:
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
	
}

void LCD_WRITE_COMMAND(unsigned char command)
{
  fa:	cf 93       	push	r28
  fc:	c8 2f       	mov	r28, r24
	LCD_CTRL &= ~(1<<RW_PIN)|(1<<RS_PIN); // Clear
	LCD_KICK();
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_ISBUSY();
  fe:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_ISBUSY>
	LCD_PORT = (LCD_PORT & 0x0F) | (command & 0xF0);
 102:	8b b3       	in	r24, 0x1b	; 27
 104:	8f 70       	andi	r24, 0x0F	; 15
 106:	9c 2f       	mov	r25, r28
 108:	90 7f       	andi	r25, 0xF0	; 240
 10a:	89 2b       	or	r24, r25
 10c:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 10e:	88 b3       	in	r24, 0x18	; 24
 110:	89 7f       	andi	r24, 0xF9	; 249
 112:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 114:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_KICK>
	LCD_PORT = (LCD_PORT & 0x0F) | (command << 4);
 118:	2b b3       	in	r18, 0x1b	; 27
 11a:	30 e1       	ldi	r19, 0x10	; 16
 11c:	c3 9f       	mul	r28, r19
 11e:	c0 01       	movw	r24, r0
 120:	11 24       	eor	r1, r1
 122:	92 2f       	mov	r25, r18
 124:	9f 70       	andi	r25, 0x0F	; 15
 126:	89 2b       	or	r24, r25
 128:	8b bb       	out	0x1b, r24	; 27
	LCD_CTRL &= ~ ((1<<RW_PIN)|(1<<RS_PIN));
 12a:	88 b3       	in	r24, 0x18	; 24
 12c:	89 7f       	andi	r24, 0xF9	; 249
 12e:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 130:	0e 94 3e 00 	call	0x7c	; 0x7c <LCD_KICK>
	#endif
}
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <LCD_CLEAR_SCREEN>:
	}
}

void LCD_CLEAR_SCREEN(void)
{
	LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 138:	81 e0       	ldi	r24, 0x01	; 1
 13a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
 13e:	08 95       	ret

00000140 <LCD_INIT>:
 140:	87 e8       	ldi	r24, 0x87	; 135
 142:	93 e1       	ldi	r25, 0x13	; 19
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_INIT+0x4>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_INIT+0xa>
 14a:	00 00       	nop
#include "lcd.h"

void LCD_INIT(void)
{
	_delay_ms(20);
	LCD_ISBUSY();
 14c:	0e 94 6e 00 	call	0xdc	; 0xdc <LCD_ISBUSY>
	DataDir_LCD_CTRL |= ((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); // Set as output
 150:	87 b3       	in	r24, 0x17	; 23
 152:	8e 60       	ori	r24, 0x0E	; 14
 154:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<E_PIN)|(1<<RW_PIN)|(1<<RS_PIN)); // Clear
 156:	88 b3       	in	r24, 0x18	; 24
 158:	81 7f       	andi	r24, 0xF1	; 241
 15a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF; // Set Port as Output
 15c:	8f ef       	ldi	r24, 0xFF	; 255
 15e:	8a bb       	out	0x1a, r24	; 26
 160:	85 ea       	ldi	r24, 0xA5	; 165
 162:	9e e0       	ldi	r25, 0x0E	; 14
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <LCD_INIT+0x24>
 168:	00 c0       	rjmp	.+0      	; 0x16a <LCD_INIT+0x2a>
 16a:	00 00       	nop
	_delay_ms(15);
	LCD_CLEAR_SCREEN();
 16c:	0e 94 9c 00 	call	0x138	; 0x138 <LCD_CLEAR_SCREEN>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
	#endif
	
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); // As datasheet
 170:	82 e0       	ldi	r24, 0x02	; 2
 172:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
 176:	88 e2       	ldi	r24, 0x28	; 40
 178:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
	#endif
	
	LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 17c:	86 e0       	ldi	r24, 0x06	; 6
 17e:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 182:	80 e8       	ldi	r24, 0x80	; 128
 184:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 188:	8f e0       	ldi	r24, 0x0F	; 15
 18a:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
 18e:	08 95       	ret

00000190 <LCD_GOTOXY>:
	LCD_CTRL &= ~(1<<RW_PIN);
}

void LCD_GOTOXY(unsigned char line, unsigned char position)
{
	if (line == 0)
 190:	81 11       	cpse	r24, r1
 192:	07 c0       	rjmp	.+14     	; 0x1a2 <LCD_GOTOXY+0x12>
	{
		if (position < 16 && position >= 0)
 194:	60 31       	cpi	r22, 0x10	; 16
 196:	68 f4       	brcc	.+26     	; 0x1b2 <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 198:	80 e8       	ldi	r24, 0x80	; 128
 19a:	86 0f       	add	r24, r22
 19c:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
 1a0:	08 95       	ret
		}
	}
	else if (line == 1)
 1a2:	81 30       	cpi	r24, 0x01	; 1
 1a4:	31 f4       	brne	.+12     	; 0x1b2 <LCD_GOTOXY+0x22>
	{
		if (position < 16 && position >= 0)
 1a6:	60 31       	cpi	r22, 0x10	; 16
 1a8:	20 f4       	brcc	.+8      	; 0x1b2 <LCD_GOTOXY+0x22>
		{
			LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 1aa:	80 ec       	ldi	r24, 0xC0	; 192
 1ac:	86 0f       	add	r24, r22
 1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <LCD_WRITE_COMMAND>
 1b2:	08 95       	ret

000001b4 <main>:

uint8_t data = 0;

int main(void)
{
	LCD_INIT();
 1b4:	0e 94 a0 00 	call	0x140	; 0x140 <LCD_INIT>
	MCAL_USART_Init();
 1b8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <MCAL_USART_Init>
	
	MCAL_USART_Send('M');
 1bc:	8d e4       	ldi	r24, 0x4D	; 77
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCAL_USART_Send>
	MCAL_USART_Send('I');
 1c4:	89 e4       	ldi	r24, 0x49	; 73
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCAL_USART_Send>
	MCAL_USART_Send('N');
 1cc:	8e e4       	ldi	r24, 0x4E	; 78
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCAL_USART_Send>
	MCAL_USART_Send('A');
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	0e 94 f6 01 	call	0x3ec	; 0x3ec <MCAL_USART_Send>
    
	while (1) 
    {
		LCD_GOTOXY(0,0);
 1dc:	60 e0       	ldi	r22, 0x00	; 0
 1de:	80 e0       	ldi	r24, 0x00	; 0
 1e0:	0e 94 c8 00 	call	0x190	; 0x190 <LCD_GOTOXY>
		data = MCAL_USART_Receive();
 1e4:	0e 94 05 02 	call	0x40a	; 0x40a <MCAL_USART_Receive>
 1e8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		LCD_WRITE_CHAR(data);
 1ec:	0e 94 4b 00 	call	0x96	; 0x96 <LCD_WRITE_CHAR>
 1f0:	f5 cf       	rjmp	.-22     	; 0x1dc <main+0x28>

000001f2 <MCAL_USART_Init>:
#define F_CPU 16000000UL
#endif // F_CPU
USART_Config_t USART = {0};

void MCAL_USART_Init(void)
{
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
	uint8 UCSRA_Temp = 0;
	uint8 UCSRB_Temp = 0;
	uint8 UCSRC_Temp = 0;
	float32_t UBBR_Temp = 0.0;
	
	switch(USART.Micro_State)
 1f8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <USART>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	31 f0       	breq	.+12     	; 0x20c <MCAL_USART_Init+0x1a>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	31 f0       	breq	.+12     	; 0x210 <MCAL_USART_Init+0x1e>
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	31 f0       	breq	.+12     	; 0x214 <MCAL_USART_Init+0x22>
USART_Config_t USART = {0};

void MCAL_USART_Init(void)
{
	uint8 UCSRA_Temp = 0;
	uint8 UCSRB_Temp = 0;
 208:	d0 e0       	ldi	r29, 0x00	; 0
 20a:	05 c0       	rjmp	.+10     	; 0x216 <MCAL_USART_Init+0x24>
			CLR_BIT(UCSRB_Temp,TXEN);
			break;
			
		case USART_Transmitter:
			CLR_BIT(UCSRB_Temp,RXEN);
			SET_BIT(UCSRB_Temp,TXEN);
 20c:	d8 e0       	ldi	r29, 0x08	; 8
			break;
 20e:	03 c0       	rjmp	.+6      	; 0x216 <MCAL_USART_Init+0x24>
			
		case USART_Receiver_Transmitter:
			SET_BIT(UCSRB_Temp,RXEN);
			SET_BIT(UCSRB_Temp,TXEN);
 210:	d8 e1       	ldi	r29, 0x18	; 24
			break;
 212:	01 c0       	rjmp	.+2      	; 0x216 <MCAL_USART_Init+0x24>
			CLR_BIT(UCSRB_Temp,TXEN);
			break;
			
		case USART_Receiver:
			SET_BIT(UCSRB_Temp,RXEN);
			CLR_BIT(UCSRB_Temp,TXEN);
 214:	d0 e1       	ldi	r29, 0x10	; 16
			break;
			
		default:
			break;
	}
	switch(USART.Communcation_Mode)
 216:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <USART+0x1>
 21a:	81 30       	cpi	r24, 0x01	; 1
 21c:	41 f1       	breq	.+80     	; 0x26e <MCAL_USART_Init+0x7c>
 21e:	20 f0       	brcs	.+8      	; 0x228 <MCAL_USART_Init+0x36>
 220:	82 30       	cpi	r24, 0x02	; 2
 222:	09 f4       	brne	.+2      	; 0x226 <MCAL_USART_Init+0x34>
 224:	47 c0       	rjmp	.+142    	; 0x2b4 <MCAL_USART_Init+0xc2>
 226:	6b c0       	rjmp	.+214    	; 0x2fe <MCAL_USART_Init+0x10c>
	{
		case USART_Asyn_Normal:
			CLR_BIT(UCSRC_Temp,UMSEL);
			CLR_BIT(UCSRA_Temp,U2X);
			CLR_BIT(UCSRC_Temp,UCPOL);
			UBBR_Temp = ((float32_t)F_CPU)/(16.0 * USART.Baud_Rate) - 0.5;
 228:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <USART+0x7>
 22c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <USART+0x8>
 230:	78 2f       	mov	r23, r24
 232:	73 70       	andi	r23, 0x03	; 3
 234:	07 2e       	mov	r0, r23
 236:	00 0c       	add	r0, r0
 238:	88 0b       	sbc	r24, r24
 23a:	99 0b       	sbc	r25, r25
 23c:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatsisf>
 240:	20 e0       	ldi	r18, 0x00	; 0
 242:	30 e0       	ldi	r19, 0x00	; 0
 244:	40 e8       	ldi	r20, 0x80	; 128
 246:	51 e4       	ldi	r21, 0x41	; 65
 248:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 24c:	9b 01       	movw	r18, r22
 24e:	ac 01       	movw	r20, r24
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	74 e2       	ldi	r23, 0x24	; 36
 254:	84 e7       	ldi	r24, 0x74	; 116
 256:	9b e4       	ldi	r25, 0x4B	; 75
 258:	0e 94 9b 02 	call	0x536	; 0x536 <__divsf3>
 25c:	20 e0       	ldi	r18, 0x00	; 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	5f e3       	ldi	r21, 0x3F	; 63
 264:	0e 94 2e 02 	call	0x45c	; 0x45c <__subsf3>
	switch(USART.Communcation_Mode)
	{
		case USART_Asyn_Normal:
			CLR_BIT(UCSRC_Temp,UMSEL);
			CLR_BIT(UCSRA_Temp,U2X);
			CLR_BIT(UCSRC_Temp,UCPOL);
 268:	c0 e0       	ldi	r28, 0x00	; 0
	}
	switch(USART.Communcation_Mode)
	{
		case USART_Asyn_Normal:
			CLR_BIT(UCSRC_Temp,UMSEL);
			CLR_BIT(UCSRA_Temp,U2X);
 26a:	10 e0       	ldi	r17, 0x00	; 0
			CLR_BIT(UCSRC_Temp,UCPOL);
			UBBR_Temp = ((float32_t)F_CPU)/(16.0 * USART.Baud_Rate) - 0.5;
			break;
 26c:	50 c0       	rjmp	.+160    	; 0x30e <MCAL_USART_Init+0x11c>
			
		case USART_Asyn_DoupleSpeed:
			CLR_BIT(UCSRC_Temp,UMSEL);
			SET_BIT  (UCSRA_Temp,U2X);
			CLR_BIT(UCSRC_Temp,UCPOL);
			UBBR_Temp = ((float32_t)F_CPU)/(8.0 * USART.Baud_Rate) - 0.5;
 26e:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <USART+0x7>
 272:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <USART+0x8>
 276:	78 2f       	mov	r23, r24
 278:	73 70       	andi	r23, 0x03	; 3
 27a:	07 2e       	mov	r0, r23
 27c:	00 0c       	add	r0, r0
 27e:	88 0b       	sbc	r24, r24
 280:	99 0b       	sbc	r25, r25
 282:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatsisf>
 286:	20 e0       	ldi	r18, 0x00	; 0
 288:	30 e0       	ldi	r19, 0x00	; 0
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	51 e4       	ldi	r21, 0x41	; 65
 28e:	0e 94 ca 03 	call	0x794	; 0x794 <__mulsf3>
 292:	9b 01       	movw	r18, r22
 294:	ac 01       	movw	r20, r24
 296:	60 e0       	ldi	r22, 0x00	; 0
 298:	74 e2       	ldi	r23, 0x24	; 36
 29a:	84 e7       	ldi	r24, 0x74	; 116
 29c:	9b e4       	ldi	r25, 0x4B	; 75
 29e:	0e 94 9b 02 	call	0x536	; 0x536 <__divsf3>
 2a2:	20 e0       	ldi	r18, 0x00	; 0
 2a4:	30 e0       	ldi	r19, 0x00	; 0
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	5f e3       	ldi	r21, 0x3F	; 63
 2aa:	0e 94 2e 02 	call	0x45c	; 0x45c <__subsf3>
			break;
			
		case USART_Asyn_DoupleSpeed:
			CLR_BIT(UCSRC_Temp,UMSEL);
			SET_BIT  (UCSRA_Temp,U2X);
			CLR_BIT(UCSRC_Temp,UCPOL);
 2ae:	c0 e0       	ldi	r28, 0x00	; 0
			UBBR_Temp = ((float32_t)F_CPU)/(16.0 * USART.Baud_Rate) - 0.5;
			break;
			
		case USART_Asyn_DoupleSpeed:
			CLR_BIT(UCSRC_Temp,UMSEL);
			SET_BIT  (UCSRA_Temp,U2X);
 2b0:	12 e0       	ldi	r17, 0x02	; 2
			CLR_BIT(UCSRC_Temp,UCPOL);
			UBBR_Temp = ((float32_t)F_CPU)/(8.0 * USART.Baud_Rate) - 0.5;
			break;
 2b2:	2d c0       	rjmp	.+90     	; 0x30e <MCAL_USART_Init+0x11c>
			
		case USART_Sync_Master:
			SET_BIT  (UCSRC_Temp,UMSEL);
			CLR_BIT(UCSRA_Temp,U2X);
			UBBR_Temp = ((float32_t)F_CPU)/(2.0 * USART.Baud_Rate) - 0.5;
 2b4:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <USART+0x7>
 2b8:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <USART+0x8>
 2bc:	78 2f       	mov	r23, r24
 2be:	73 70       	andi	r23, 0x03	; 3
 2c0:	07 2e       	mov	r0, r23
 2c2:	00 0c       	add	r0, r0
 2c4:	88 0b       	sbc	r24, r24
 2c6:	99 0b       	sbc	r25, r25
 2c8:	0e 94 3e 03 	call	0x67c	; 0x67c <__floatsisf>
 2cc:	9b 01       	movw	r18, r22
 2ce:	ac 01       	movw	r20, r24
 2d0:	0e 94 2f 02 	call	0x45e	; 0x45e <__addsf3>
 2d4:	9b 01       	movw	r18, r22
 2d6:	ac 01       	movw	r20, r24
 2d8:	60 e0       	ldi	r22, 0x00	; 0
 2da:	74 e2       	ldi	r23, 0x24	; 36
 2dc:	84 e7       	ldi	r24, 0x74	; 116
 2de:	9b e4       	ldi	r25, 0x4B	; 75
 2e0:	0e 94 9b 02 	call	0x536	; 0x536 <__divsf3>
 2e4:	20 e0       	ldi	r18, 0x00	; 0
 2e6:	30 e0       	ldi	r19, 0x00	; 0
 2e8:	40 e0       	ldi	r20, 0x00	; 0
 2ea:	5f e3       	ldi	r21, 0x3F	; 63
 2ec:	0e 94 2e 02 	call	0x45c	; 0x45c <__subsf3>
			
		switch(USART.Clock_Parity)
 2f0:	20 91 67 00 	lds	r18, 0x0067	; 0x800067 <USART+0x6>
 2f4:	21 30       	cpi	r18, 0x01	; 1
 2f6:	49 f0       	breq	.+18     	; 0x30a <MCAL_USART_Init+0x118>
			CLR_BIT(UCSRC_Temp,UCPOL);
			UBBR_Temp = ((float32_t)F_CPU)/(8.0 * USART.Baud_Rate) - 0.5;
			break;
			
		case USART_Sync_Master:
			SET_BIT  (UCSRC_Temp,UMSEL);
 2f8:	c0 e4       	ldi	r28, 0x40	; 64
			CLR_BIT(UCSRA_Temp,U2X);
 2fa:	10 e0       	ldi	r17, 0x00	; 0
 2fc:	08 c0       	rjmp	.+16     	; 0x30e <MCAL_USART_Init+0x11c>
void MCAL_USART_Init(void)
{
	uint8 UCSRA_Temp = 0;
	uint8 UCSRB_Temp = 0;
	uint8 UCSRC_Temp = 0;
	float32_t UBBR_Temp = 0.0;
 2fe:	60 e0       	ldi	r22, 0x00	; 0
 300:	70 e0       	ldi	r23, 0x00	; 0
 302:	cb 01       	movw	r24, r22

void MCAL_USART_Init(void)
{
	uint8 UCSRA_Temp = 0;
	uint8 UCSRB_Temp = 0;
	uint8 UCSRC_Temp = 0;
 304:	c0 e0       	ldi	r28, 0x00	; 0
#endif // F_CPU
USART_Config_t USART = {0};

void MCAL_USART_Init(void)
{
	uint8 UCSRA_Temp = 0;
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	02 c0       	rjmp	.+4      	; 0x30e <MCAL_USART_Init+0x11c>
			case USART_SamplingOnFaling:
				CLR_BIT(UCSRC_Temp,UCPOL);
				break;
				
			case USART_SamplingOnRising:
				SET_BIT(UCSRC_Temp,UCPOL);
 30a:	c1 e4       	ldi	r28, 0x41	; 65
			UBBR_Temp = ((float32_t)F_CPU)/(8.0 * USART.Baud_Rate) - 0.5;
			break;
			
		case USART_Sync_Master:
			SET_BIT  (UCSRC_Temp,UMSEL);
			CLR_BIT(UCSRA_Temp,U2X);
 30c:	10 e0       	ldi	r17, 0x00	; 0
			break;
			
		default:
			break;
	}
	switch(USART.Communication_Processor)
 30e:	20 91 63 00 	lds	r18, 0x0063	; 0x800063 <USART+0x2>
 312:	22 23       	and	r18, r18
 314:	19 f0       	breq	.+6      	; 0x31c <MCAL_USART_Init+0x12a>
 316:	21 30       	cpi	r18, 0x01	; 1
 318:	19 f0       	breq	.+6      	; 0x320 <MCAL_USART_Init+0x12e>
 31a:	03 c0       	rjmp	.+6      	; 0x322 <MCAL_USART_Init+0x130>
	{
		case USART_SingleProcessor:
			CLR_BIT(UCSRA_Temp,MPCM);
 31c:	1e 7f       	andi	r17, 0xFE	; 254
			break;
 31e:	01 c0       	rjmp	.+2      	; 0x322 <MCAL_USART_Init+0x130>
			
		case USART_MultiProcessor:
			SET_BIT(UCSRA_Temp,MPCM);
 320:	11 60       	ori	r17, 0x01	; 1
			break;
			
		default:
			break;
	}
	switch(USART.Interrupt_Source)
 322:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <USART+0x3>
 326:	23 30       	cpi	r18, 0x03	; 3
 328:	89 f0       	breq	.+34     	; 0x34c <MCAL_USART_Init+0x15a>
 32a:	28 f4       	brcc	.+10     	; 0x336 <MCAL_USART_Init+0x144>
 32c:	21 30       	cpi	r18, 0x01	; 1
 32e:	51 f0       	breq	.+20     	; 0x344 <MCAL_USART_Init+0x152>
 330:	22 30       	cpi	r18, 0x02	; 2
 332:	51 f0       	breq	.+20     	; 0x348 <MCAL_USART_Init+0x156>
 334:	12 c0       	rjmp	.+36     	; 0x35a <MCAL_USART_Init+0x168>
 336:	26 30       	cpi	r18, 0x06	; 6
 338:	69 f0       	breq	.+26     	; 0x354 <MCAL_USART_Init+0x162>
 33a:	27 30       	cpi	r18, 0x07	; 7
 33c:	69 f0       	breq	.+26     	; 0x358 <MCAL_USART_Init+0x166>
 33e:	25 30       	cpi	r18, 0x05	; 5
 340:	61 f4       	brne	.+24     	; 0x35a <MCAL_USART_Init+0x168>
 342:	06 c0       	rjmp	.+12     	; 0x350 <MCAL_USART_Init+0x15e>
		
		case USART_Interrupt_Disable:
			break;
		
		case USART_RxComplete_Enable:
			SET_BIT(UCSRB_Temp,RXCIE);
 344:	d0 68       	ori	r29, 0x80	; 128
			break;
 346:	09 c0       	rjmp	.+18     	; 0x35a <MCAL_USART_Init+0x168>
		
		case USART_TxComplete_Enable:
			SET_BIT(UCSRB_Temp,TXCIE);
 348:	d0 64       	ori	r29, 0x40	; 64
			break;
 34a:	07 c0       	rjmp	.+14     	; 0x35a <MCAL_USART_Init+0x168>
		
		case USART_UDR_Enable:
			SET_BIT(UCSRB_Temp,UDRIE);
 34c:	d0 62       	ori	r29, 0x20	; 32
			break;
 34e:	05 c0       	rjmp	.+10     	; 0x35a <MCAL_USART_Init+0x168>
		
		case USART_RX_Complete_UDR_Enable:
			SET_BIT(UCSRB_Temp,RXCIE);
			SET_BIT(UCSRB_Temp,UDRIE);
 350:	d0 6a       	ori	r29, 0xA0	; 160
			break;
 352:	03 c0       	rjmp	.+6      	; 0x35a <MCAL_USART_Init+0x168>
		
		case USART_Tx_Complete_UDR_Enable:
			SET_BIT(UCSRB_Temp,TXCIE);
			SET_BIT(UCSRB_Temp,UDRIE);
 354:	d0 66       	ori	r29, 0x60	; 96
			break;
 356:	01 c0       	rjmp	.+2      	; 0x35a <MCAL_USART_Init+0x168>
		
		case USART_All_Interrupt_Enable:
			SET_BIT(UCSRB_Temp,RXCIE);
			SET_BIT(UCSRB_Temp,TXCIE);
			SET_BIT(UCSRB_Temp,UDRIE);
 358:	d0 6e       	ori	r29, 0xE0	; 224
			break;
		
		default:
			break;
	}
	switch(USART.Character_Size)
 35a:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <USART+0x4>
 35e:	22 30       	cpi	r18, 0x02	; 2
 360:	91 f0       	breq	.+36     	; 0x386 <MCAL_USART_Init+0x194>
 362:	28 f4       	brcc	.+10     	; 0x36e <MCAL_USART_Init+0x17c>
 364:	22 23       	and	r18, r18
 366:	41 f0       	breq	.+16     	; 0x378 <MCAL_USART_Init+0x186>
 368:	21 30       	cpi	r18, 0x01	; 1
 36a:	49 f0       	breq	.+18     	; 0x37e <MCAL_USART_Init+0x18c>
 36c:	15 c0       	rjmp	.+42     	; 0x398 <MCAL_USART_Init+0x1a6>
 36e:	23 30       	cpi	r18, 0x03	; 3
 370:	71 f0       	breq	.+28     	; 0x38e <MCAL_USART_Init+0x19c>
 372:	24 30       	cpi	r18, 0x04	; 4
 374:	79 f0       	breq	.+30     	; 0x394 <MCAL_USART_Init+0x1a2>
 376:	10 c0       	rjmp	.+32     	; 0x398 <MCAL_USART_Init+0x1a6>
	{
		case Size_5bit:
			CLR_BIT(UCSRB_Temp,UCSZ2);
 378:	db 7f       	andi	r29, 0xFB	; 251
			CLR_BIT(UCSRC_Temp,UCSZ1);
			CLR_BIT(UCSRC_Temp,UCSZ0);
 37a:	c9 7f       	andi	r28, 0xF9	; 249
			break;
 37c:	0d c0       	rjmp	.+26     	; 0x398 <MCAL_USART_Init+0x1a6>
			
		case Size_6bit:
			CLR_BIT(UCSRB_Temp,UCSZ2);
 37e:	db 7f       	andi	r29, 0xFB	; 251
			CLR_BIT(UCSRC_Temp,UCSZ1);
 380:	cb 7f       	andi	r28, 0xFB	; 251
			SET_BIT(UCSRC_Temp,UCSZ0);
 382:	c2 60       	ori	r28, 0x02	; 2
			break;
 384:	09 c0       	rjmp	.+18     	; 0x398 <MCAL_USART_Init+0x1a6>
			
		case Size_7bit:
			CLR_BIT(UCSRB_Temp,UCSZ2);
 386:	db 7f       	andi	r29, 0xFB	; 251
 388:	cd 7f       	andi	r28, 0xFD	; 253
			SET_BIT(UCSRC_Temp,UCSZ1);
			CLR_BIT(UCSRC_Temp,UCSZ0);
 38a:	c4 60       	ori	r28, 0x04	; 4
			break;
 38c:	05 c0       	rjmp	.+10     	; 0x398 <MCAL_USART_Init+0x1a6>
			
		case Size_8bit:
			CLR_BIT(UCSRB_Temp,UCSZ2);
 38e:	db 7f       	andi	r29, 0xFB	; 251
			SET_BIT(UCSRC_Temp,UCSZ1);
			SET_BIT(UCSRC_Temp,UCSZ0);
 390:	c6 60       	ori	r28, 0x06	; 6
			break;
 392:	02 c0       	rjmp	.+4      	; 0x398 <MCAL_USART_Init+0x1a6>
			
		case Size_9bit:
			SET_BIT(UCSRB_Temp,UCSZ2);
 394:	d4 60       	ori	r29, 0x04	; 4
			SET_BIT(UCSRC_Temp,UCSZ1);
			SET_BIT(UCSRC_Temp,UCSZ0);
 396:	c6 60       	ori	r28, 0x06	; 6
			
		default:
			break;
			
	}
	switch(USART.Frame_Control)
 398:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <USART+0x5>
 39c:	22 30       	cpi	r18, 0x02	; 2
 39e:	89 f0       	breq	.+34     	; 0x3c2 <MCAL_USART_Init+0x1d0>
 3a0:	28 f4       	brcc	.+10     	; 0x3ac <MCAL_USART_Init+0x1ba>
 3a2:	22 23       	and	r18, r18
 3a4:	49 f0       	breq	.+18     	; 0x3b8 <MCAL_USART_Init+0x1c6>
 3a6:	21 30       	cpi	r18, 0x01	; 1
 3a8:	49 f0       	breq	.+18     	; 0x3bc <MCAL_USART_Init+0x1ca>
 3aa:	15 c0       	rjmp	.+42     	; 0x3d6 <MCAL_USART_Init+0x1e4>
 3ac:	24 30       	cpi	r18, 0x04	; 4
 3ae:	79 f0       	breq	.+30     	; 0x3ce <MCAL_USART_Init+0x1dc>
 3b0:	58 f0       	brcs	.+22     	; 0x3c8 <MCAL_USART_Init+0x1d6>
 3b2:	25 30       	cpi	r18, 0x05	; 5
 3b4:	79 f0       	breq	.+30     	; 0x3d4 <MCAL_USART_Init+0x1e2>
 3b6:	0f c0       	rjmp	.+30     	; 0x3d6 <MCAL_USART_Init+0x1e4>
	{
		case USART_Parity_Disable_1StopBit:
			CLR_BIT(UCSRC_Temp,UPM1);
			CLR_BIT(UCSRC_Temp,UPM0);
			CLR_BIT(UCSRC_Temp,USBS);
 3b8:	c7 7c       	andi	r28, 0xC7	; 199
			break;
 3ba:	0d c0       	rjmp	.+26     	; 0x3d6 <MCAL_USART_Init+0x1e4>
			
		case USART_Parity_Disable_2StopBit:
			CLR_BIT(UCSRC_Temp,UPM1);
			CLR_BIT(UCSRC_Temp,UPM0);
 3bc:	cf 7c       	andi	r28, 0xCF	; 207
			SET_BIT(UCSRC_Temp,USBS);
 3be:	c8 60       	ori	r28, 0x08	; 8
			break;
 3c0:	0a c0       	rjmp	.+20     	; 0x3d6 <MCAL_USART_Init+0x1e4>
 3c2:	c7 7e       	andi	r28, 0xE7	; 231
			
		case USART_Parity_Even_1StopBit:
			SET_BIT(UCSRC_Temp,UPM1);
			CLR_BIT(UCSRC_Temp,UPM0);
			CLR_BIT(UCSRC_Temp,USBS);
 3c4:	c0 62       	ori	r28, 0x20	; 32
			break;
 3c6:	07 c0       	rjmp	.+14     	; 0x3d6 <MCAL_USART_Init+0x1e4>
 3c8:	cf 7e       	andi	r28, 0xEF	; 239
		
		case USART_Parity_Even_2StopBit:
			SET_BIT(UCSRC_Temp,UPM1);
			CLR_BIT(UCSRC_Temp,UPM0);
			SET_BIT(UCSRC_Temp,USBS);
 3ca:	c8 62       	ori	r28, 0x28	; 40
			break;
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <MCAL_USART_Init+0x1e4>
 3ce:	c7 7f       	andi	r28, 0xF7	; 247
			
		case USART_Parity_Odd_1StopBit:
			SET_BIT(UCSRC_Temp,UPM1);
			SET_BIT(UCSRC_Temp,UPM0);
			CLR_BIT(UCSRC_Temp,USBS);
 3d0:	c0 63       	ori	r28, 0x30	; 48
			break;
 3d2:	01 c0       	rjmp	.+2      	; 0x3d6 <MCAL_USART_Init+0x1e4>
			
		case USART_Parity_Odd_2StopBit:
			SET_BIT(UCSRC_Temp,UPM1);
			SET_BIT(UCSRC_Temp,UPM0);
			SET_BIT(UCSRC_Temp,USBS);
 3d4:	c8 63       	ori	r28, 0x38	; 56
			
		default:
			break;
	}
		
	UBRRH = ((uint16)UBBR_Temp) >> 8; /* Shift right to get the most bits of UBBR */
 3d6:	0e 94 0d 03 	call	0x61a	; 0x61a <__fixunssfsi>
 3da:	70 bd       	out	0x20, r23	; 32
	UBRRL = ((uint16)UBBR_Temp);
 3dc:	69 b9       	out	0x09, r22	; 9
	UCSRA = UCSRA_Temp;
 3de:	1b b9       	out	0x0b, r17	; 11
	UCSRC = UCSRC_Temp;
 3e0:	c0 bd       	out	0x20, r28	; 32
	UCSRB = UCSRB_Temp; /* Put in the last because on it the enable bit of the UART */
 3e2:	da b9       	out	0x0a, r29	; 10
}
 3e4:	df 91       	pop	r29
 3e6:	cf 91       	pop	r28
 3e8:	1f 91       	pop	r17
 3ea:	08 95       	ret

000003ec <MCAL_USART_Send>:

void MCAL_USART_Send(uint16 data)
{
	while(GET_BIT(UCSRA,UDRE) == 0);
 3ec:	5d 9b       	sbis	0x0b, 5	; 11
 3ee:	fe cf       	rjmp	.-4      	; 0x3ec <MCAL_USART_Send>
	
	if(USART.Character_Size == Size_9bit)
 3f0:	20 91 65 00 	lds	r18, 0x0065	; 0x800065 <USART+0x4>
 3f4:	24 30       	cpi	r18, 0x04	; 4
 3f6:	39 f4       	brne	.+14     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		/*
		* UCSRB & 1111 1110 to make sure the bit 0 is reset to hold the new value because it does not mention in data sheet
		* we need to take the bit 9  in the data and hold it in the bit 0  in the UCSRB so we & the data with 8 to get
		*  and shift it again to put in the position of the bit 0
		*/
		UCSRB = (UCSRB & 0xFE) | ((data & (1<<8))>>8);
 3f8:	2a b1       	in	r18, 0x0a	; 10
 3fa:	2e 7f       	andi	r18, 0xFE	; 254
 3fc:	ac 01       	movw	r20, r24
 3fe:	44 27       	eor	r20, r20
 400:	51 70       	andi	r21, 0x01	; 1
 402:	25 2b       	or	r18, r21
 404:	2a b9       	out	0x0a, r18	; 10
	}
	
	UDR = (uint8) data;
 406:	8c b9       	out	0x0c, r24	; 12
 408:	08 95       	ret

0000040a <MCAL_USART_Receive>:

uint16 MCAL_USART_Receive (void)
{
	uint16 Recived_Data = 0;
	
	if(GET_BIT(UCSRA,RXC) != 0);
 40a:	8b b1       	in	r24, 0x0b	; 11
	
	if(GET_BIT(UCSRA,FE) | GET_BIT(UCSRA,DOR) | GET_BIT(UCSRA,PE))
 40c:	9b b1       	in	r25, 0x0b	; 11
 40e:	2b b1       	in	r18, 0x0b	; 11
 410:	92 95       	swap	r25
 412:	9f 70       	andi	r25, 0x0F	; 15
 414:	82 2f       	mov	r24, r18
 416:	86 95       	lsr	r24
 418:	86 95       	lsr	r24
 41a:	86 95       	lsr	r24
 41c:	98 2b       	or	r25, r24
 41e:	8b b1       	in	r24, 0x0b	; 11
 420:	86 95       	lsr	r24
 422:	86 95       	lsr	r24
 424:	89 2b       	or	r24, r25
 426:	80 ff       	sbrs	r24, 0
 428:	11 c0       	rjmp	.+34     	; 0x44c <MCAL_USART_Receive+0x42>
	{
		if(GET_BIT(UCSRA,FE))
 42a:	5c 9b       	sbis	0x0b, 4	; 11
 42c:	04 c0       	rjmp	.+8      	; 0x436 <MCAL_USART_Receive+0x2c>
		{
			USART.Error_Type = USART_FrameError;
 42e:	83 e0       	ldi	r24, 0x03	; 3
 430:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <USART+0x9>
 434:	0b c0       	rjmp	.+22     	; 0x44c <MCAL_USART_Receive+0x42>
		}
		else if (GET_BIT(UCSRA,DOR))
 436:	5b 9b       	sbis	0x0b, 3	; 11
 438:	04 c0       	rjmp	.+8      	; 0x442 <MCAL_USART_Receive+0x38>
		{
			USART.Error_Type = USART_DataOverRunError;
 43a:	82 e0       	ldi	r24, 0x02	; 2
 43c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <USART+0x9>
 440:	05 c0       	rjmp	.+10     	; 0x44c <MCAL_USART_Receive+0x42>
		}
		else if (GET_BIT(UCSRA,PE))
 442:	5a 9b       	sbis	0x0b, 2	; 11
 444:	03 c0       	rjmp	.+6      	; 0x44c <MCAL_USART_Receive+0x42>
		{
			USART.Error_Type = USART_ParityError;
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <USART+0x9>
		}
	}
	
	if(USART.Character_Size == Size_9bit)
 44c:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <USART+0x4>
 450:	84 30       	cpi	r24, 0x04	; 4
 452:	09 f4       	brne	.+2      	; 0x456 <MCAL_USART_Receive+0x4c>
	{
		/* read the 9bit from the bit 1 in the UCSRB then shift it to left by 7 to hold in 9bit */
		Recived_Data = UCSRB & (1 << RXB8) >> 7;
 454:	8a b1       	in	r24, 0x0a	; 10
	}
	
	Recived_Data = UDR;
 456:	8c b1       	in	r24, 0x0c	; 12
	
	return Recived_Data;
}
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	08 95       	ret

0000045c <__subsf3>:
 45c:	50 58       	subi	r21, 0x80	; 128

0000045e <__addsf3>:
 45e:	bb 27       	eor	r27, r27
 460:	aa 27       	eor	r26, r26
 462:	0e 94 46 02 	call	0x48c	; 0x48c <__addsf3x>
 466:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 46a:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 46e:	38 f0       	brcs	.+14     	; 0x47e <__addsf3+0x20>
 470:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 474:	20 f0       	brcs	.+8      	; 0x47e <__addsf3+0x20>
 476:	39 f4       	brne	.+14     	; 0x486 <__addsf3+0x28>
 478:	9f 3f       	cpi	r25, 0xFF	; 255
 47a:	19 f4       	brne	.+6      	; 0x482 <__addsf3+0x24>
 47c:	26 f4       	brtc	.+8      	; 0x486 <__addsf3+0x28>
 47e:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 482:	0e f4       	brtc	.+2      	; 0x486 <__addsf3+0x28>
 484:	e0 95       	com	r30
 486:	e7 fb       	bst	r30, 7
 488:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>

0000048c <__addsf3x>:
 48c:	e9 2f       	mov	r30, r25
 48e:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 492:	58 f3       	brcs	.-42     	; 0x46a <__addsf3+0xc>
 494:	ba 17       	cp	r27, r26
 496:	62 07       	cpc	r22, r18
 498:	73 07       	cpc	r23, r19
 49a:	84 07       	cpc	r24, r20
 49c:	95 07       	cpc	r25, r21
 49e:	20 f0       	brcs	.+8      	; 0x4a8 <__addsf3x+0x1c>
 4a0:	79 f4       	brne	.+30     	; 0x4c0 <__addsf3x+0x34>
 4a2:	a6 f5       	brtc	.+104    	; 0x50c <__addsf3x+0x80>
 4a4:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 4a8:	0e f4       	brtc	.+2      	; 0x4ac <__addsf3x+0x20>
 4aa:	e0 95       	com	r30
 4ac:	0b 2e       	mov	r0, r27
 4ae:	ba 2f       	mov	r27, r26
 4b0:	a0 2d       	mov	r26, r0
 4b2:	0b 01       	movw	r0, r22
 4b4:	b9 01       	movw	r22, r18
 4b6:	90 01       	movw	r18, r0
 4b8:	0c 01       	movw	r0, r24
 4ba:	ca 01       	movw	r24, r20
 4bc:	a0 01       	movw	r20, r0
 4be:	11 24       	eor	r1, r1
 4c0:	ff 27       	eor	r31, r31
 4c2:	59 1b       	sub	r21, r25
 4c4:	99 f0       	breq	.+38     	; 0x4ec <__addsf3x+0x60>
 4c6:	59 3f       	cpi	r21, 0xF9	; 249
 4c8:	50 f4       	brcc	.+20     	; 0x4de <__addsf3x+0x52>
 4ca:	50 3e       	cpi	r21, 0xE0	; 224
 4cc:	68 f1       	brcs	.+90     	; 0x528 <__addsf3x+0x9c>
 4ce:	1a 16       	cp	r1, r26
 4d0:	f0 40       	sbci	r31, 0x00	; 0
 4d2:	a2 2f       	mov	r26, r18
 4d4:	23 2f       	mov	r18, r19
 4d6:	34 2f       	mov	r19, r20
 4d8:	44 27       	eor	r20, r20
 4da:	58 5f       	subi	r21, 0xF8	; 248
 4dc:	f3 cf       	rjmp	.-26     	; 0x4c4 <__addsf3x+0x38>
 4de:	46 95       	lsr	r20
 4e0:	37 95       	ror	r19
 4e2:	27 95       	ror	r18
 4e4:	a7 95       	ror	r26
 4e6:	f0 40       	sbci	r31, 0x00	; 0
 4e8:	53 95       	inc	r21
 4ea:	c9 f7       	brne	.-14     	; 0x4de <__addsf3x+0x52>
 4ec:	7e f4       	brtc	.+30     	; 0x50c <__addsf3x+0x80>
 4ee:	1f 16       	cp	r1, r31
 4f0:	ba 0b       	sbc	r27, r26
 4f2:	62 0b       	sbc	r22, r18
 4f4:	73 0b       	sbc	r23, r19
 4f6:	84 0b       	sbc	r24, r20
 4f8:	ba f0       	brmi	.+46     	; 0x528 <__addsf3x+0x9c>
 4fa:	91 50       	subi	r25, 0x01	; 1
 4fc:	a1 f0       	breq	.+40     	; 0x526 <__addsf3x+0x9a>
 4fe:	ff 0f       	add	r31, r31
 500:	bb 1f       	adc	r27, r27
 502:	66 1f       	adc	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	c2 f7       	brpl	.-16     	; 0x4fa <__addsf3x+0x6e>
 50a:	0e c0       	rjmp	.+28     	; 0x528 <__addsf3x+0x9c>
 50c:	ba 0f       	add	r27, r26
 50e:	62 1f       	adc	r22, r18
 510:	73 1f       	adc	r23, r19
 512:	84 1f       	adc	r24, r20
 514:	48 f4       	brcc	.+18     	; 0x528 <__addsf3x+0x9c>
 516:	87 95       	ror	r24
 518:	77 95       	ror	r23
 51a:	67 95       	ror	r22
 51c:	b7 95       	ror	r27
 51e:	f7 95       	ror	r31
 520:	9e 3f       	cpi	r25, 0xFE	; 254
 522:	08 f0       	brcs	.+2      	; 0x526 <__addsf3x+0x9a>
 524:	b0 cf       	rjmp	.-160    	; 0x486 <__addsf3+0x28>
 526:	93 95       	inc	r25
 528:	88 0f       	add	r24, r24
 52a:	08 f0       	brcs	.+2      	; 0x52e <__addsf3x+0xa2>
 52c:	99 27       	eor	r25, r25
 52e:	ee 0f       	add	r30, r30
 530:	97 95       	ror	r25
 532:	87 95       	ror	r24
 534:	08 95       	ret

00000536 <__divsf3>:
 536:	0e 94 af 02 	call	0x55e	; 0x55e <__divsf3x>
 53a:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 53e:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 542:	58 f0       	brcs	.+22     	; 0x55a <__divsf3+0x24>
 544:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 548:	40 f0       	brcs	.+16     	; 0x55a <__divsf3+0x24>
 54a:	29 f4       	brne	.+10     	; 0x556 <__divsf3+0x20>
 54c:	5f 3f       	cpi	r21, 0xFF	; 255
 54e:	29 f0       	breq	.+10     	; 0x55a <__divsf3+0x24>
 550:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 554:	51 11       	cpse	r21, r1
 556:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 55a:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>

0000055e <__divsf3x>:
 55e:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 562:	68 f3       	brcs	.-38     	; 0x53e <__divsf3+0x8>

00000564 <__divsf3_pse>:
 564:	99 23       	and	r25, r25
 566:	b1 f3       	breq	.-20     	; 0x554 <__divsf3+0x1e>
 568:	55 23       	and	r21, r21
 56a:	91 f3       	breq	.-28     	; 0x550 <__divsf3+0x1a>
 56c:	95 1b       	sub	r25, r21
 56e:	55 0b       	sbc	r21, r21
 570:	bb 27       	eor	r27, r27
 572:	aa 27       	eor	r26, r26
 574:	62 17       	cp	r22, r18
 576:	73 07       	cpc	r23, r19
 578:	84 07       	cpc	r24, r20
 57a:	38 f0       	brcs	.+14     	; 0x58a <__divsf3_pse+0x26>
 57c:	9f 5f       	subi	r25, 0xFF	; 255
 57e:	5f 4f       	sbci	r21, 0xFF	; 255
 580:	22 0f       	add	r18, r18
 582:	33 1f       	adc	r19, r19
 584:	44 1f       	adc	r20, r20
 586:	aa 1f       	adc	r26, r26
 588:	a9 f3       	breq	.-22     	; 0x574 <__divsf3_pse+0x10>
 58a:	35 d0       	rcall	.+106    	; 0x5f6 <__divsf3_pse+0x92>
 58c:	0e 2e       	mov	r0, r30
 58e:	3a f0       	brmi	.+14     	; 0x59e <__divsf3_pse+0x3a>
 590:	e0 e8       	ldi	r30, 0x80	; 128
 592:	32 d0       	rcall	.+100    	; 0x5f8 <__divsf3_pse+0x94>
 594:	91 50       	subi	r25, 0x01	; 1
 596:	50 40       	sbci	r21, 0x00	; 0
 598:	e6 95       	lsr	r30
 59a:	00 1c       	adc	r0, r0
 59c:	ca f7       	brpl	.-14     	; 0x590 <__divsf3_pse+0x2c>
 59e:	2b d0       	rcall	.+86     	; 0x5f6 <__divsf3_pse+0x92>
 5a0:	fe 2f       	mov	r31, r30
 5a2:	29 d0       	rcall	.+82     	; 0x5f6 <__divsf3_pse+0x92>
 5a4:	66 0f       	add	r22, r22
 5a6:	77 1f       	adc	r23, r23
 5a8:	88 1f       	adc	r24, r24
 5aa:	bb 1f       	adc	r27, r27
 5ac:	26 17       	cp	r18, r22
 5ae:	37 07       	cpc	r19, r23
 5b0:	48 07       	cpc	r20, r24
 5b2:	ab 07       	cpc	r26, r27
 5b4:	b0 e8       	ldi	r27, 0x80	; 128
 5b6:	09 f0       	breq	.+2      	; 0x5ba <__divsf3_pse+0x56>
 5b8:	bb 0b       	sbc	r27, r27
 5ba:	80 2d       	mov	r24, r0
 5bc:	bf 01       	movw	r22, r30
 5be:	ff 27       	eor	r31, r31
 5c0:	93 58       	subi	r25, 0x83	; 131
 5c2:	5f 4f       	sbci	r21, 0xFF	; 255
 5c4:	3a f0       	brmi	.+14     	; 0x5d4 <__divsf3_pse+0x70>
 5c6:	9e 3f       	cpi	r25, 0xFE	; 254
 5c8:	51 05       	cpc	r21, r1
 5ca:	78 f0       	brcs	.+30     	; 0x5ea <__divsf3_pse+0x86>
 5cc:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 5d0:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 5d4:	5f 3f       	cpi	r21, 0xFF	; 255
 5d6:	e4 f3       	brlt	.-8      	; 0x5d0 <__divsf3_pse+0x6c>
 5d8:	98 3e       	cpi	r25, 0xE8	; 232
 5da:	d4 f3       	brlt	.-12     	; 0x5d0 <__divsf3_pse+0x6c>
 5dc:	86 95       	lsr	r24
 5de:	77 95       	ror	r23
 5e0:	67 95       	ror	r22
 5e2:	b7 95       	ror	r27
 5e4:	f7 95       	ror	r31
 5e6:	9f 5f       	subi	r25, 0xFF	; 255
 5e8:	c9 f7       	brne	.-14     	; 0x5dc <__divsf3_pse+0x78>
 5ea:	88 0f       	add	r24, r24
 5ec:	91 1d       	adc	r25, r1
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret
 5f6:	e1 e0       	ldi	r30, 0x01	; 1
 5f8:	66 0f       	add	r22, r22
 5fa:	77 1f       	adc	r23, r23
 5fc:	88 1f       	adc	r24, r24
 5fe:	bb 1f       	adc	r27, r27
 600:	62 17       	cp	r22, r18
 602:	73 07       	cpc	r23, r19
 604:	84 07       	cpc	r24, r20
 606:	ba 07       	cpc	r27, r26
 608:	20 f0       	brcs	.+8      	; 0x612 <__divsf3_pse+0xae>
 60a:	62 1b       	sub	r22, r18
 60c:	73 0b       	sbc	r23, r19
 60e:	84 0b       	sbc	r24, r20
 610:	ba 0b       	sbc	r27, r26
 612:	ee 1f       	adc	r30, r30
 614:	88 f7       	brcc	.-30     	; 0x5f8 <__divsf3_pse+0x94>
 616:	e0 95       	com	r30
 618:	08 95       	ret

0000061a <__fixunssfsi>:
 61a:	0e 94 a9 03 	call	0x752	; 0x752 <__fp_splitA>
 61e:	88 f0       	brcs	.+34     	; 0x642 <__fixunssfsi+0x28>
 620:	9f 57       	subi	r25, 0x7F	; 127
 622:	98 f0       	brcs	.+38     	; 0x64a <__fixunssfsi+0x30>
 624:	b9 2f       	mov	r27, r25
 626:	99 27       	eor	r25, r25
 628:	b7 51       	subi	r27, 0x17	; 23
 62a:	b0 f0       	brcs	.+44     	; 0x658 <__fixunssfsi+0x3e>
 62c:	e1 f0       	breq	.+56     	; 0x666 <__fixunssfsi+0x4c>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	88 1f       	adc	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	1a f0       	brmi	.+6      	; 0x63e <__fixunssfsi+0x24>
 638:	ba 95       	dec	r27
 63a:	c9 f7       	brne	.-14     	; 0x62e <__fixunssfsi+0x14>
 63c:	14 c0       	rjmp	.+40     	; 0x666 <__fixunssfsi+0x4c>
 63e:	b1 30       	cpi	r27, 0x01	; 1
 640:	91 f0       	breq	.+36     	; 0x666 <__fixunssfsi+0x4c>
 642:	0e 94 c3 03 	call	0x786	; 0x786 <__fp_zero>
 646:	b1 e0       	ldi	r27, 0x01	; 1
 648:	08 95       	ret
 64a:	0c 94 c3 03 	jmp	0x786	; 0x786 <__fp_zero>
 64e:	67 2f       	mov	r22, r23
 650:	78 2f       	mov	r23, r24
 652:	88 27       	eor	r24, r24
 654:	b8 5f       	subi	r27, 0xF8	; 248
 656:	39 f0       	breq	.+14     	; 0x666 <__fixunssfsi+0x4c>
 658:	b9 3f       	cpi	r27, 0xF9	; 249
 65a:	cc f3       	brlt	.-14     	; 0x64e <__fixunssfsi+0x34>
 65c:	86 95       	lsr	r24
 65e:	77 95       	ror	r23
 660:	67 95       	ror	r22
 662:	b3 95       	inc	r27
 664:	d9 f7       	brne	.-10     	; 0x65c <__fixunssfsi+0x42>
 666:	3e f4       	brtc	.+14     	; 0x676 <__fixunssfsi+0x5c>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	08 95       	ret

00000678 <__floatunsisf>:
 678:	e8 94       	clt
 67a:	09 c0       	rjmp	.+18     	; 0x68e <__floatsisf+0x12>

0000067c <__floatsisf>:
 67c:	97 fb       	bst	r25, 7
 67e:	3e f4       	brtc	.+14     	; 0x68e <__floatsisf+0x12>
 680:	90 95       	com	r25
 682:	80 95       	com	r24
 684:	70 95       	com	r23
 686:	61 95       	neg	r22
 688:	7f 4f       	sbci	r23, 0xFF	; 255
 68a:	8f 4f       	sbci	r24, 0xFF	; 255
 68c:	9f 4f       	sbci	r25, 0xFF	; 255
 68e:	99 23       	and	r25, r25
 690:	a9 f0       	breq	.+42     	; 0x6bc <__floatsisf+0x40>
 692:	f9 2f       	mov	r31, r25
 694:	96 e9       	ldi	r25, 0x96	; 150
 696:	bb 27       	eor	r27, r27
 698:	93 95       	inc	r25
 69a:	f6 95       	lsr	r31
 69c:	87 95       	ror	r24
 69e:	77 95       	ror	r23
 6a0:	67 95       	ror	r22
 6a2:	b7 95       	ror	r27
 6a4:	f1 11       	cpse	r31, r1
 6a6:	f8 cf       	rjmp	.-16     	; 0x698 <__floatsisf+0x1c>
 6a8:	fa f4       	brpl	.+62     	; 0x6e8 <__floatsisf+0x6c>
 6aa:	bb 0f       	add	r27, r27
 6ac:	11 f4       	brne	.+4      	; 0x6b2 <__floatsisf+0x36>
 6ae:	60 ff       	sbrs	r22, 0
 6b0:	1b c0       	rjmp	.+54     	; 0x6e8 <__floatsisf+0x6c>
 6b2:	6f 5f       	subi	r22, 0xFF	; 255
 6b4:	7f 4f       	sbci	r23, 0xFF	; 255
 6b6:	8f 4f       	sbci	r24, 0xFF	; 255
 6b8:	9f 4f       	sbci	r25, 0xFF	; 255
 6ba:	16 c0       	rjmp	.+44     	; 0x6e8 <__floatsisf+0x6c>
 6bc:	88 23       	and	r24, r24
 6be:	11 f0       	breq	.+4      	; 0x6c4 <__floatsisf+0x48>
 6c0:	96 e9       	ldi	r25, 0x96	; 150
 6c2:	11 c0       	rjmp	.+34     	; 0x6e6 <__floatsisf+0x6a>
 6c4:	77 23       	and	r23, r23
 6c6:	21 f0       	breq	.+8      	; 0x6d0 <__floatsisf+0x54>
 6c8:	9e e8       	ldi	r25, 0x8E	; 142
 6ca:	87 2f       	mov	r24, r23
 6cc:	76 2f       	mov	r23, r22
 6ce:	05 c0       	rjmp	.+10     	; 0x6da <__floatsisf+0x5e>
 6d0:	66 23       	and	r22, r22
 6d2:	71 f0       	breq	.+28     	; 0x6f0 <__floatsisf+0x74>
 6d4:	96 e8       	ldi	r25, 0x86	; 134
 6d6:	86 2f       	mov	r24, r22
 6d8:	70 e0       	ldi	r23, 0x00	; 0
 6da:	60 e0       	ldi	r22, 0x00	; 0
 6dc:	2a f0       	brmi	.+10     	; 0x6e8 <__floatsisf+0x6c>
 6de:	9a 95       	dec	r25
 6e0:	66 0f       	add	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	da f7       	brpl	.-10     	; 0x6de <__floatsisf+0x62>
 6e8:	88 0f       	add	r24, r24
 6ea:	96 95       	lsr	r25
 6ec:	87 95       	ror	r24
 6ee:	97 f9       	bld	r25, 7
 6f0:	08 95       	ret

000006f2 <__fp_inf>:
 6f2:	97 f9       	bld	r25, 7
 6f4:	9f 67       	ori	r25, 0x7F	; 127
 6f6:	80 e8       	ldi	r24, 0x80	; 128
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	60 e0       	ldi	r22, 0x00	; 0
 6fc:	08 95       	ret

000006fe <__fp_nan>:
 6fe:	9f ef       	ldi	r25, 0xFF	; 255
 700:	80 ec       	ldi	r24, 0xC0	; 192
 702:	08 95       	ret

00000704 <__fp_pscA>:
 704:	00 24       	eor	r0, r0
 706:	0a 94       	dec	r0
 708:	16 16       	cp	r1, r22
 70a:	17 06       	cpc	r1, r23
 70c:	18 06       	cpc	r1, r24
 70e:	09 06       	cpc	r0, r25
 710:	08 95       	ret

00000712 <__fp_pscB>:
 712:	00 24       	eor	r0, r0
 714:	0a 94       	dec	r0
 716:	12 16       	cp	r1, r18
 718:	13 06       	cpc	r1, r19
 71a:	14 06       	cpc	r1, r20
 71c:	05 06       	cpc	r0, r21
 71e:	08 95       	ret

00000720 <__fp_round>:
 720:	09 2e       	mov	r0, r25
 722:	03 94       	inc	r0
 724:	00 0c       	add	r0, r0
 726:	11 f4       	brne	.+4      	; 0x72c <__fp_round+0xc>
 728:	88 23       	and	r24, r24
 72a:	52 f0       	brmi	.+20     	; 0x740 <__fp_round+0x20>
 72c:	bb 0f       	add	r27, r27
 72e:	40 f4       	brcc	.+16     	; 0x740 <__fp_round+0x20>
 730:	bf 2b       	or	r27, r31
 732:	11 f4       	brne	.+4      	; 0x738 <__fp_round+0x18>
 734:	60 ff       	sbrs	r22, 0
 736:	04 c0       	rjmp	.+8      	; 0x740 <__fp_round+0x20>
 738:	6f 5f       	subi	r22, 0xFF	; 255
 73a:	7f 4f       	sbci	r23, 0xFF	; 255
 73c:	8f 4f       	sbci	r24, 0xFF	; 255
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <__fp_split3>:
 742:	57 fd       	sbrc	r21, 7
 744:	90 58       	subi	r25, 0x80	; 128
 746:	44 0f       	add	r20, r20
 748:	55 1f       	adc	r21, r21
 74a:	59 f0       	breq	.+22     	; 0x762 <__fp_splitA+0x10>
 74c:	5f 3f       	cpi	r21, 0xFF	; 255
 74e:	71 f0       	breq	.+28     	; 0x76c <__fp_splitA+0x1a>
 750:	47 95       	ror	r20

00000752 <__fp_splitA>:
 752:	88 0f       	add	r24, r24
 754:	97 fb       	bst	r25, 7
 756:	99 1f       	adc	r25, r25
 758:	61 f0       	breq	.+24     	; 0x772 <__fp_splitA+0x20>
 75a:	9f 3f       	cpi	r25, 0xFF	; 255
 75c:	79 f0       	breq	.+30     	; 0x77c <__fp_splitA+0x2a>
 75e:	87 95       	ror	r24
 760:	08 95       	ret
 762:	12 16       	cp	r1, r18
 764:	13 06       	cpc	r1, r19
 766:	14 06       	cpc	r1, r20
 768:	55 1f       	adc	r21, r21
 76a:	f2 cf       	rjmp	.-28     	; 0x750 <__fp_split3+0xe>
 76c:	46 95       	lsr	r20
 76e:	f1 df       	rcall	.-30     	; 0x752 <__fp_splitA>
 770:	08 c0       	rjmp	.+16     	; 0x782 <__fp_splitA+0x30>
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	18 06       	cpc	r1, r24
 778:	99 1f       	adc	r25, r25
 77a:	f1 cf       	rjmp	.-30     	; 0x75e <__fp_splitA+0xc>
 77c:	86 95       	lsr	r24
 77e:	71 05       	cpc	r23, r1
 780:	61 05       	cpc	r22, r1
 782:	08 94       	sec
 784:	08 95       	ret

00000786 <__fp_zero>:
 786:	e8 94       	clt

00000788 <__fp_szero>:
 788:	bb 27       	eor	r27, r27
 78a:	66 27       	eor	r22, r22
 78c:	77 27       	eor	r23, r23
 78e:	cb 01       	movw	r24, r22
 790:	97 f9       	bld	r25, 7
 792:	08 95       	ret

00000794 <__mulsf3>:
 794:	0e 94 dd 03 	call	0x7ba	; 0x7ba <__mulsf3x>
 798:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_round>
 79c:	0e 94 82 03 	call	0x704	; 0x704 <__fp_pscA>
 7a0:	38 f0       	brcs	.+14     	; 0x7b0 <__mulsf3+0x1c>
 7a2:	0e 94 89 03 	call	0x712	; 0x712 <__fp_pscB>
 7a6:	20 f0       	brcs	.+8      	; 0x7b0 <__mulsf3+0x1c>
 7a8:	95 23       	and	r25, r21
 7aa:	11 f0       	breq	.+4      	; 0x7b0 <__mulsf3+0x1c>
 7ac:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 7b0:	0c 94 7f 03 	jmp	0x6fe	; 0x6fe <__fp_nan>
 7b4:	11 24       	eor	r1, r1
 7b6:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>

000007ba <__mulsf3x>:
 7ba:	0e 94 a1 03 	call	0x742	; 0x742 <__fp_split3>
 7be:	70 f3       	brcs	.-36     	; 0x79c <__mulsf3+0x8>

000007c0 <__mulsf3_pse>:
 7c0:	95 9f       	mul	r25, r21
 7c2:	c1 f3       	breq	.-16     	; 0x7b4 <__mulsf3+0x20>
 7c4:	95 0f       	add	r25, r21
 7c6:	50 e0       	ldi	r21, 0x00	; 0
 7c8:	55 1f       	adc	r21, r21
 7ca:	62 9f       	mul	r22, r18
 7cc:	f0 01       	movw	r30, r0
 7ce:	72 9f       	mul	r23, r18
 7d0:	bb 27       	eor	r27, r27
 7d2:	f0 0d       	add	r31, r0
 7d4:	b1 1d       	adc	r27, r1
 7d6:	63 9f       	mul	r22, r19
 7d8:	aa 27       	eor	r26, r26
 7da:	f0 0d       	add	r31, r0
 7dc:	b1 1d       	adc	r27, r1
 7de:	aa 1f       	adc	r26, r26
 7e0:	64 9f       	mul	r22, r20
 7e2:	66 27       	eor	r22, r22
 7e4:	b0 0d       	add	r27, r0
 7e6:	a1 1d       	adc	r26, r1
 7e8:	66 1f       	adc	r22, r22
 7ea:	82 9f       	mul	r24, r18
 7ec:	22 27       	eor	r18, r18
 7ee:	b0 0d       	add	r27, r0
 7f0:	a1 1d       	adc	r26, r1
 7f2:	62 1f       	adc	r22, r18
 7f4:	73 9f       	mul	r23, r19
 7f6:	b0 0d       	add	r27, r0
 7f8:	a1 1d       	adc	r26, r1
 7fa:	62 1f       	adc	r22, r18
 7fc:	83 9f       	mul	r24, r19
 7fe:	a0 0d       	add	r26, r0
 800:	61 1d       	adc	r22, r1
 802:	22 1f       	adc	r18, r18
 804:	74 9f       	mul	r23, r20
 806:	33 27       	eor	r19, r19
 808:	a0 0d       	add	r26, r0
 80a:	61 1d       	adc	r22, r1
 80c:	23 1f       	adc	r18, r19
 80e:	84 9f       	mul	r24, r20
 810:	60 0d       	add	r22, r0
 812:	21 1d       	adc	r18, r1
 814:	82 2f       	mov	r24, r18
 816:	76 2f       	mov	r23, r22
 818:	6a 2f       	mov	r22, r26
 81a:	11 24       	eor	r1, r1
 81c:	9f 57       	subi	r25, 0x7F	; 127
 81e:	50 40       	sbci	r21, 0x00	; 0
 820:	9a f0       	brmi	.+38     	; 0x848 <__DATA_REGION_LENGTH__+0x48>
 822:	f1 f0       	breq	.+60     	; 0x860 <__stack+0x1>
 824:	88 23       	and	r24, r24
 826:	4a f0       	brmi	.+18     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
 828:	ee 0f       	add	r30, r30
 82a:	ff 1f       	adc	r31, r31
 82c:	bb 1f       	adc	r27, r27
 82e:	66 1f       	adc	r22, r22
 830:	77 1f       	adc	r23, r23
 832:	88 1f       	adc	r24, r24
 834:	91 50       	subi	r25, 0x01	; 1
 836:	50 40       	sbci	r21, 0x00	; 0
 838:	a9 f7       	brne	.-22     	; 0x824 <__DATA_REGION_LENGTH__+0x24>
 83a:	9e 3f       	cpi	r25, 0xFE	; 254
 83c:	51 05       	cpc	r21, r1
 83e:	80 f0       	brcs	.+32     	; 0x860 <__stack+0x1>
 840:	0c 94 79 03 	jmp	0x6f2	; 0x6f2 <__fp_inf>
 844:	0c 94 c4 03 	jmp	0x788	; 0x788 <__fp_szero>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	e4 f3       	brlt	.-8      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 84c:	98 3e       	cpi	r25, 0xE8	; 232
 84e:	d4 f3       	brlt	.-12     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
 850:	86 95       	lsr	r24
 852:	77 95       	ror	r23
 854:	67 95       	ror	r22
 856:	b7 95       	ror	r27
 858:	f7 95       	ror	r31
 85a:	e7 95       	ror	r30
 85c:	9f 5f       	subi	r25, 0xFF	; 255
 85e:	c1 f7       	brne	.-16     	; 0x850 <__DATA_REGION_LENGTH__+0x50>
 860:	fe 2b       	or	r31, r30
 862:	88 0f       	add	r24, r24
 864:	91 1d       	adc	r25, r1
 866:	96 95       	lsr	r25
 868:	87 95       	ror	r24
 86a:	97 f9       	bld	r25, 7
 86c:	08 95       	ret

0000086e <_exit>:
 86e:	f8 94       	cli

00000870 <__stop_program>:
 870:	ff cf       	rjmp	.-2      	; 0x870 <__stop_program>
