
STM32F103C6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b24  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000c54  08000c54  00010c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c6c  08000c6c  00010c74  2**0
                  CONTENTS
  4 .ARM          00000000  08000c6c  08000c6c  00010c74  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c6c  08000c74  00010c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c6c  08000c6c  00010c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c70  08000c70  00010c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  20000000  08000c74  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000068  08000c74  00020068  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010c74  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001431  00000000  00000000  00010c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006c4  00000000  00000000  000120ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a54  00000000  00000000  00012792  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001e8  00000000  00000000  000131e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000180  00000000  00000000  000133d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  000003b3  00000000  00000000  00013550  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001339  00000000  00000000  00013903  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000063de  00000000  00000000  00014c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      00000053  00000000  00000000  0001b01a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005a0  00000000  00000000  0001b070  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c3c 	.word	0x08000c3c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000c3c 	.word	0x08000c3c

08000170 <USART_Test_1_Debugging_Using_Polling>:
/* ========== Prototypes ========= */
static void clock_init(void);

/* =========== Main Program ========== */
void USART_Test_1_Debugging_Using_Polling(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b086      	sub	sp, #24
 8000174:	af00      	add	r7, sp, #0
	/* Initializing the clock */
	clock_init();
 8000176:	f000 f829 	bl	80001cc <clock_init>

	/* Configuration of USART1 */
	USART_Config_t USART1_Config;

	USART1_Config.BaudRate = UART_BaudRate_115200;
 800017a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800017e:	60bb      	str	r3, [r7, #8]
	USART1_Config.HwFlowCtl = UART_HwFlowCtl_NONE;
 8000180:	2300      	movs	r3, #0
 8000182:	73fb      	strb	r3, [r7, #15]
	USART1_Config.IRQ_Enable = UART_IRQ_Enable_NONE;
 8000184:	2300      	movs	r3, #0
 8000186:	743b      	strb	r3, [r7, #16]
	USART1_Config.P_IRQ_CallBack = NULL;
 8000188:	2300      	movs	r3, #0
 800018a:	617b      	str	r3, [r7, #20]
	USART1_Config.Parity = UART_Parity_NONE;
 800018c:	2300      	movs	r3, #0
 800018e:	737b      	strb	r3, [r7, #13]
	USART1_Config.Payload_Length = UART_Payload_Length_8B;
 8000190:	2300      	movs	r3, #0
 8000192:	733b      	strb	r3, [r7, #12]
	USART1_Config.StopBits = UART_StopBits_1;
 8000194:	2300      	movs	r3, #0
 8000196:	73bb      	strb	r3, [r7, #14]
	USART1_Config.USART_Mode = UART_Mode_TX_RX;
 8000198:	230c      	movs	r3, #12
 800019a:	713b      	strb	r3, [r7, #4]

	MCAL_UART_Init(USART1, &USART1_Config);
 800019c:	1d3b      	adds	r3, r7, #4
 800019e:	4619      	mov	r1, r3
 80001a0:	4808      	ldr	r0, [pc, #32]	; (80001c4 <USART_Test_1_Debugging_Using_Polling+0x54>)
 80001a2:	f000 fad1 	bl	8000748 <MCAL_UART_Init>
	MCAL_UART_GPIO_Set_Pins(USART1);
 80001a6:	4807      	ldr	r0, [pc, #28]	; (80001c4 <USART_Test_1_Debugging_Using_Polling+0x54>)
 80001a8:	f000 fc4c 	bl	8000a44 <MCAL_UART_GPIO_Set_Pins>

	while(1)
	{
		MCAL_UART_ReceiveData(USART1, &data, enable);
 80001ac:	2200      	movs	r2, #0
 80001ae:	4906      	ldr	r1, [pc, #24]	; (80001c8 <USART_Test_1_Debugging_Using_Polling+0x58>)
 80001b0:	4804      	ldr	r0, [pc, #16]	; (80001c4 <USART_Test_1_Debugging_Using_Polling+0x54>)
 80001b2:	f000 fbdb 	bl	800096c <MCAL_UART_ReceiveData>
		MCAL_UART_SendData(USART1, &data, enable);
 80001b6:	2200      	movs	r2, #0
 80001b8:	4903      	ldr	r1, [pc, #12]	; (80001c8 <USART_Test_1_Debugging_Using_Polling+0x58>)
 80001ba:	4802      	ldr	r0, [pc, #8]	; (80001c4 <USART_Test_1_Debugging_Using_Polling+0x54>)
 80001bc:	f000 fb8c 	bl	80008d8 <MCAL_UART_SendData>
		MCAL_UART_ReceiveData(USART1, &data, enable);
 80001c0:	e7f4      	b.n	80001ac <USART_Test_1_Debugging_Using_Polling+0x3c>
 80001c2:	bf00      	nop
 80001c4:	40013800 	.word	0x40013800
 80001c8:	20000028 	.word	0x20000028

080001cc <clock_init>:
	}
}

/* ======== clock Initialize definition ======= */
static void clock_init(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 80001d0:	4b0a      	ldr	r3, [pc, #40]	; (80001fc <clock_init+0x30>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	4a09      	ldr	r2, [pc, #36]	; (80001fc <clock_init+0x30>)
 80001d6:	f043 0304 	orr.w	r3, r3, #4
 80001da:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 80001dc:	4b07      	ldr	r3, [pc, #28]	; (80001fc <clock_init+0x30>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a06      	ldr	r2, [pc, #24]	; (80001fc <clock_init+0x30>)
 80001e2:	f043 0308 	orr.w	r3, r3, #8
 80001e6:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <clock_init+0x30>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a03      	ldr	r2, [pc, #12]	; (80001fc <clock_init+0x30>)
 80001ee:	f043 0301 	orr.w	r3, r3, #1
 80001f2:	6193      	str	r3, [r2, #24]
}
 80001f4:	bf00      	nop
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bc80      	pop	{r7}
 80001fa:	4770      	bx	lr
 80001fc:	40021000 	.word	0x40021000

08000200 <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <EXTI0_IRQHandler+0x1c>)
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	4a04      	ldr	r2, [pc, #16]	; (800021c <EXTI0_IRQHandler+0x1c>)
 800020a:	f043 0301 	orr.w	r3, r3, #1
 800020e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 8000210:	4b03      	ldr	r3, [pc, #12]	; (8000220 <EXTI0_IRQHandler+0x20>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4798      	blx	r3

}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	40010400 	.word	0x40010400
 8000220:	2000002c 	.word	0x2000002c

08000224 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 8000228:	4b05      	ldr	r3, [pc, #20]	; (8000240 <EXTI1_IRQHandler+0x1c>)
 800022a:	695b      	ldr	r3, [r3, #20]
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <EXTI1_IRQHandler+0x1c>)
 800022e:	f043 0302 	orr.w	r3, r3, #2
 8000232:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <EXTI1_IRQHandler+0x20>)
 8000236:	685b      	ldr	r3, [r3, #4]
 8000238:	4798      	blx	r3

}
 800023a:	bf00      	nop
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40010400 	.word	0x40010400
 8000244:	2000002c 	.word	0x2000002c

08000248 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <EXTI2_IRQHandler+0x1c>)
 800024e:	695b      	ldr	r3, [r3, #20]
 8000250:	4a04      	ldr	r2, [pc, #16]	; (8000264 <EXTI2_IRQHandler+0x1c>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 8000258:	4b03      	ldr	r3, [pc, #12]	; (8000268 <EXTI2_IRQHandler+0x20>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4798      	blx	r3

}
 800025e:	bf00      	nop
 8000260:	bd80      	pop	{r7, pc}
 8000262:	bf00      	nop
 8000264:	40010400 	.word	0x40010400
 8000268:	2000002c 	.word	0x2000002c

0800026c <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <EXTI3_IRQHandler+0x1c>)
 8000272:	695b      	ldr	r3, [r3, #20]
 8000274:	4a04      	ldr	r2, [pc, #16]	; (8000288 <EXTI3_IRQHandler+0x1c>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 800027c:	4b03      	ldr	r3, [pc, #12]	; (800028c <EXTI3_IRQHandler+0x20>)
 800027e:	68db      	ldr	r3, [r3, #12]
 8000280:	4798      	blx	r3

}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40010400 	.word	0x40010400
 800028c:	2000002c 	.word	0x2000002c

08000290 <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000294:	4b05      	ldr	r3, [pc, #20]	; (80002ac <EXTI4_IRQHandler+0x1c>)
 8000296:	695b      	ldr	r3, [r3, #20]
 8000298:	4a04      	ldr	r2, [pc, #16]	; (80002ac <EXTI4_IRQHandler+0x1c>)
 800029a:	f043 0310 	orr.w	r3, r3, #16
 800029e:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 80002a0:	4b03      	ldr	r3, [pc, #12]	; (80002b0 <EXTI4_IRQHandler+0x20>)
 80002a2:	691b      	ldr	r3, [r3, #16]
 80002a4:	4798      	blx	r3

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40010400 	.word	0x40010400
 80002b0:	2000002c 	.word	0x2000002c

080002b4 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 80002b8:	4b26      	ldr	r3, [pc, #152]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002ba:	695b      	ldr	r3, [r3, #20]
 80002bc:	f003 0320 	and.w	r3, r3, #32
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d008      	beq.n	80002d6 <EXTI9_5_IRQHandler+0x22>
 80002c4:	4b23      	ldr	r3, [pc, #140]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	4a22      	ldr	r2, [pc, #136]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002ca:	f043 0320 	orr.w	r3, r3, #32
 80002ce:	6153      	str	r3, [r2, #20]
 80002d0:	4b21      	ldr	r3, [pc, #132]	; (8000358 <EXTI9_5_IRQHandler+0xa4>)
 80002d2:	695b      	ldr	r3, [r3, #20]
 80002d4:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 80002d6:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002d8:	695b      	ldr	r3, [r3, #20]
 80002da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d008      	beq.n	80002f4 <EXTI9_5_IRQHandler+0x40>
 80002e2:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002e4:	695b      	ldr	r3, [r3, #20]
 80002e6:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002ec:	6153      	str	r3, [r2, #20]
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <EXTI9_5_IRQHandler+0xa4>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 80002f4:	4b17      	ldr	r3, [pc, #92]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 80002f6:	695b      	ldr	r3, [r3, #20]
 80002f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d008      	beq.n	8000312 <EXTI9_5_IRQHandler+0x5e>
 8000300:	4b14      	ldr	r3, [pc, #80]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000302:	695b      	ldr	r3, [r3, #20]
 8000304:	4a13      	ldr	r2, [pc, #76]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000306:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800030a:	6153      	str	r3, [r2, #20]
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <EXTI9_5_IRQHandler+0xa4>)
 800030e:	69db      	ldr	r3, [r3, #28]
 8000310:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 8000312:	4b10      	ldr	r3, [pc, #64]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000314:	695b      	ldr	r3, [r3, #20]
 8000316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800031a:	2b00      	cmp	r3, #0
 800031c:	d008      	beq.n	8000330 <EXTI9_5_IRQHandler+0x7c>
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000320:	695b      	ldr	r3, [r3, #20]
 8000322:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000328:	6153      	str	r3, [r2, #20]
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <EXTI9_5_IRQHandler+0xa4>)
 800032c:	6a1b      	ldr	r3, [r3, #32]
 800032e:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000338:	2b00      	cmp	r3, #0
 800033a:	d008      	beq.n	800034e <EXTI9_5_IRQHandler+0x9a>
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <EXTI9_5_IRQHandler+0xa0>)
 8000342:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000346:	6153      	str	r3, [r2, #20]
 8000348:	4b03      	ldr	r3, [pc, #12]	; (8000358 <EXTI9_5_IRQHandler+0xa4>)
 800034a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800034c:	4798      	blx	r3
}
 800034e:	bf00      	nop
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40010400 	.word	0x40010400
 8000358:	2000002c 	.word	0x2000002c

0800035c <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 8000360:	4b2d      	ldr	r3, [pc, #180]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000362:	695b      	ldr	r3, [r3, #20]
 8000364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000368:	2b00      	cmp	r3, #0
 800036a:	d008      	beq.n	800037e <EXTI15_10_IRQHandler+0x22>
 800036c:	4b2a      	ldr	r3, [pc, #168]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 800036e:	695b      	ldr	r3, [r3, #20]
 8000370:	4a29      	ldr	r2, [pc, #164]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000372:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000376:	6153      	str	r3, [r2, #20]
 8000378:	4b28      	ldr	r3, [pc, #160]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 800037a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800037c:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 800037e:	4b26      	ldr	r3, [pc, #152]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000380:	695b      	ldr	r3, [r3, #20]
 8000382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000386:	2b00      	cmp	r3, #0
 8000388:	d008      	beq.n	800039c <EXTI15_10_IRQHandler+0x40>
 800038a:	4b23      	ldr	r3, [pc, #140]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 800038c:	695b      	ldr	r3, [r3, #20]
 800038e:	4a22      	ldr	r2, [pc, #136]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000394:	6153      	str	r3, [r2, #20]
 8000396:	4b21      	ldr	r3, [pc, #132]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 8000398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800039a:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 800039c:	4b1e      	ldr	r3, [pc, #120]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 800039e:	695b      	ldr	r3, [r3, #20]
 80003a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d008      	beq.n	80003ba <EXTI15_10_IRQHandler+0x5e>
 80003a8:	4b1b      	ldr	r3, [pc, #108]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003aa:	695b      	ldr	r3, [r3, #20]
 80003ac:	4a1a      	ldr	r2, [pc, #104]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003ae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003b2:	6153      	str	r3, [r2, #20]
 80003b4:	4b19      	ldr	r3, [pc, #100]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b8:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 80003ba:	4b17      	ldr	r3, [pc, #92]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003bc:	695b      	ldr	r3, [r3, #20]
 80003be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d008      	beq.n	80003d8 <EXTI15_10_IRQHandler+0x7c>
 80003c6:	4b14      	ldr	r3, [pc, #80]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003c8:	695b      	ldr	r3, [r3, #20]
 80003ca:	4a13      	ldr	r2, [pc, #76]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003d0:	6153      	str	r3, [r2, #20]
 80003d2:	4b12      	ldr	r3, [pc, #72]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003d6:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 80003d8:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003da:	695b      	ldr	r3, [r3, #20]
 80003dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d008      	beq.n	80003f6 <EXTI15_10_IRQHandler+0x9a>
 80003e4:	4b0c      	ldr	r3, [pc, #48]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003e6:	695b      	ldr	r3, [r3, #20]
 80003e8:	4a0b      	ldr	r2, [pc, #44]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ee:	6153      	str	r3, [r2, #20]
 80003f0:	4b0a      	ldr	r3, [pc, #40]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 80003f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80003f4:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 80003f6:	4b08      	ldr	r3, [pc, #32]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d008      	beq.n	8000414 <EXTI15_10_IRQHandler+0xb8>
 8000402:	4b05      	ldr	r3, [pc, #20]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	4a04      	ldr	r2, [pc, #16]	; (8000418 <EXTI15_10_IRQHandler+0xbc>)
 8000408:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800040c:	6153      	str	r3, [r2, #20]
 800040e:	4b03      	ldr	r3, [pc, #12]	; (800041c <EXTI15_10_IRQHandler+0xc0>)
 8000410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000412:	4798      	blx	r3
}
 8000414:	bf00      	nop
 8000416:	bd80      	pop	{r7, pc}
 8000418:	40010400 	.word	0x40010400
 800041c:	2000002c 	.word	0x2000002c

08000420 <Get_CRLH_Position>:
 */

#include <stm32f103x6_GPIO_driver.h>

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 800042a:	88fb      	ldrh	r3, [r7, #6]
 800042c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000430:	f000 80a5 	beq.w	800057e <Get_CRLH_Position+0x15e>
 8000434:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000438:	f300 80a3 	bgt.w	8000582 <Get_CRLH_Position+0x162>
 800043c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000440:	f000 809b 	beq.w	800057a <Get_CRLH_Position+0x15a>
 8000444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000448:	f300 809b 	bgt.w	8000582 <Get_CRLH_Position+0x162>
 800044c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000450:	f000 8091 	beq.w	8000576 <Get_CRLH_Position+0x156>
 8000454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000458:	f300 8093 	bgt.w	8000582 <Get_CRLH_Position+0x162>
 800045c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000460:	f000 8087 	beq.w	8000572 <Get_CRLH_Position+0x152>
 8000464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000468:	f300 808b 	bgt.w	8000582 <Get_CRLH_Position+0x162>
 800046c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000470:	d07d      	beq.n	800056e <Get_CRLH_Position+0x14e>
 8000472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000476:	f300 8084 	bgt.w	8000582 <Get_CRLH_Position+0x162>
 800047a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800047e:	d074      	beq.n	800056a <Get_CRLH_Position+0x14a>
 8000480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000484:	dc7d      	bgt.n	8000582 <Get_CRLH_Position+0x162>
 8000486:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800048a:	d06c      	beq.n	8000566 <Get_CRLH_Position+0x146>
 800048c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000490:	dc77      	bgt.n	8000582 <Get_CRLH_Position+0x162>
 8000492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000496:	d064      	beq.n	8000562 <Get_CRLH_Position+0x142>
 8000498:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800049c:	dc71      	bgt.n	8000582 <Get_CRLH_Position+0x162>
 800049e:	2b80      	cmp	r3, #128	; 0x80
 80004a0:	d05d      	beq.n	800055e <Get_CRLH_Position+0x13e>
 80004a2:	2b80      	cmp	r3, #128	; 0x80
 80004a4:	dc6d      	bgt.n	8000582 <Get_CRLH_Position+0x162>
 80004a6:	2b20      	cmp	r3, #32
 80004a8:	dc48      	bgt.n	800053c <Get_CRLH_Position+0x11c>
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	dd69      	ble.n	8000582 <Get_CRLH_Position+0x162>
 80004ae:	3b01      	subs	r3, #1
 80004b0:	2b1f      	cmp	r3, #31
 80004b2:	d866      	bhi.n	8000582 <Get_CRLH_Position+0x162>
 80004b4:	a201      	add	r2, pc, #4	; (adr r2, 80004bc <Get_CRLH_Position+0x9c>)
 80004b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004ba:	bf00      	nop
 80004bc:	08000543 	.word	0x08000543
 80004c0:	08000547 	.word	0x08000547
 80004c4:	08000583 	.word	0x08000583
 80004c8:	0800054b 	.word	0x0800054b
 80004cc:	08000583 	.word	0x08000583
 80004d0:	08000583 	.word	0x08000583
 80004d4:	08000583 	.word	0x08000583
 80004d8:	0800054f 	.word	0x0800054f
 80004dc:	08000583 	.word	0x08000583
 80004e0:	08000583 	.word	0x08000583
 80004e4:	08000583 	.word	0x08000583
 80004e8:	08000583 	.word	0x08000583
 80004ec:	08000583 	.word	0x08000583
 80004f0:	08000583 	.word	0x08000583
 80004f4:	08000583 	.word	0x08000583
 80004f8:	08000553 	.word	0x08000553
 80004fc:	08000583 	.word	0x08000583
 8000500:	08000583 	.word	0x08000583
 8000504:	08000583 	.word	0x08000583
 8000508:	08000583 	.word	0x08000583
 800050c:	08000583 	.word	0x08000583
 8000510:	08000583 	.word	0x08000583
 8000514:	08000583 	.word	0x08000583
 8000518:	08000583 	.word	0x08000583
 800051c:	08000583 	.word	0x08000583
 8000520:	08000583 	.word	0x08000583
 8000524:	08000583 	.word	0x08000583
 8000528:	08000583 	.word	0x08000583
 800052c:	08000583 	.word	0x08000583
 8000530:	08000583 	.word	0x08000583
 8000534:	08000583 	.word	0x08000583
 8000538:	08000557 	.word	0x08000557
 800053c:	2b40      	cmp	r3, #64	; 0x40
 800053e:	d00c      	beq.n	800055a <Get_CRLH_Position+0x13a>
	case GPIO_PIN_15:
		return 28;
		break;

	default:
		break;
 8000540:	e01f      	b.n	8000582 <Get_CRLH_Position+0x162>
		return 0;
 8000542:	2300      	movs	r3, #0
 8000544:	e01f      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 4;
 8000546:	2304      	movs	r3, #4
 8000548:	e01d      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 8;
 800054a:	2308      	movs	r3, #8
 800054c:	e01b      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 12;
 800054e:	230c      	movs	r3, #12
 8000550:	e019      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 16;
 8000552:	2310      	movs	r3, #16
 8000554:	e017      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 20;
 8000556:	2314      	movs	r3, #20
 8000558:	e015      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 24;
 800055a:	2318      	movs	r3, #24
 800055c:	e013      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 28;
 800055e:	231c      	movs	r3, #28
 8000560:	e011      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 0;
 8000562:	2300      	movs	r3, #0
 8000564:	e00f      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 4;
 8000566:	2304      	movs	r3, #4
 8000568:	e00d      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 8;
 800056a:	2308      	movs	r3, #8
 800056c:	e00b      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 12;
 800056e:	230c      	movs	r3, #12
 8000570:	e009      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 16;
 8000572:	2310      	movs	r3, #16
 8000574:	e007      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 20;
 8000576:	2314      	movs	r3, #20
 8000578:	e005      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 24;
 800057a:	2318      	movs	r3, #24
 800057c:	e003      	b.n	8000586 <Get_CRLH_Position+0x166>
		return 28;
 800057e:	231c      	movs	r3, #28
 8000580:	e001      	b.n	8000586 <Get_CRLH_Position+0x166>
		break;
 8000582:	bf00      	nop
	}
	return 0;
 8000584:	2300      	movs	r3, #0
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <MCAL_GPIO_Init>:
 * @retval 			- None
 * Note				- Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */
void MCAL_GPIO_Init (GPIO_Typedef_t *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  0 >>> 7
	//Port configuration register high (GPIOx_CRH) 8 >>> 15
	vuint32_t *config_reg = NULL; // To store which register for the input pin number
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_CONFIG = 0 ; // To store the pin configuration
 800059e:	2300      	movs	r3, #0
 80005a0:	73fb      	strb	r3, [r7, #15]

	// Check if the input GPIO is bigger than bit number 8 to return the correct register for it
	config_reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH; // Return the register (Low or High)
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	881b      	ldrh	r3, [r3, #0]
 80005a6:	2bff      	cmp	r3, #255	; 0xff
 80005a8:	d801      	bhi.n	80005ae <MCAL_GPIO_Init+0x1e>
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	e001      	b.n	80005b2 <MCAL_GPIO_Init+0x22>
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	3304      	adds	r3, #4
 80005b2:	60bb      	str	r3, [r7, #8]

	// Clear CNF8[1:0] MODE8[1:0]
	(*config_reg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	881b      	ldrh	r3, [r3, #0]
 80005b8:	4618      	mov	r0, r3
 80005ba:	f7ff ff31 	bl	8000420 <Get_CRLH_Position>
 80005be:	4603      	mov	r3, r0
 80005c0:	461a      	mov	r2, r3
 80005c2:	230f      	movs	r3, #15
 80005c4:	4093      	lsls	r3, r2
 80005c6:	43da      	mvns	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	401a      	ands	r2, r3
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	601a      	str	r2, [r3, #0]

	// If pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 80005d2:	683b      	ldr	r3, [r7, #0]
 80005d4:	789b      	ldrb	r3, [r3, #2]
 80005d6:	2b07      	cmp	r3, #7
 80005d8:	d00b      	beq.n	80005f2 <MCAL_GPIO_Init+0x62>
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	789b      	ldrb	r3, [r3, #2]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d007      	beq.n	80005f2 <MCAL_GPIO_Init+0x62>
 80005e2:	683b      	ldr	r3, [r7, #0]
 80005e4:	789b      	ldrb	r3, [r3, #2]
 80005e6:	2b05      	cmp	r3, #5
 80005e8:	d003      	beq.n	80005f2 <MCAL_GPIO_Init+0x62>
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	789b      	ldrb	r3, [r3, #2]
 80005ee:	2b04      	cmp	r3, #4
 80005f0:	d10e      	bne.n	8000610 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF8[1:0] MODE8[1:0]
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2)|(PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	789b      	ldrb	r3, [r3, #2]
 80005f6:	3b04      	subs	r3, #4
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	b25a      	sxtb	r2, r3
 80005fc:	683b      	ldr	r3, [r7, #0]
 80005fe:	78db      	ldrb	r3, [r3, #3]
 8000600:	b25b      	sxtb	r3, r3
 8000602:	4313      	orrs	r3, r2
 8000604:	b25b      	sxtb	r3, r3
 8000606:	b2db      	uxtb	r3, r3
 8000608:	f003 030f 	and.w	r3, r3, #15
 800060c:	73fb      	strb	r3, [r7, #15]
 800060e:	e02c      	b.n	800066a <MCAL_GPIO_Init+0xda>

	}
	// If pin is input
	else //00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)||(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d003      	beq.n	8000620 <MCAL_GPIO_Init+0x90>
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	789b      	ldrb	r3, [r3, #2]
 800061c:	2b01      	cmp	r3, #1
 800061e:	d107      	bne.n	8000630 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF8[1:0] MODE8[1:0] 00
			PIN_CONFIG = ((((PinConfig->GPIO_MODE) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	b2db      	uxtb	r3, r3
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e01c      	b.n	800066a <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	789b      	ldrb	r3, [r3, #2]
 8000634:	2b08      	cmp	r3, #8
 8000636:	d102      	bne.n	800063e <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLO) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000638:	2304      	movs	r3, #4
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e015      	b.n	800066a <MCAL_GPIO_Init+0xda>
		}
		else // Pull-up / Pull-Down Input
		{
			// GPIO_MODE_INPUT_PU == 0b10 as Table 20. Port bit configuration table
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 800063e:	2308      	movs	r3, #8
 8000640:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	789b      	ldrb	r3, [r3, #2]
 8000646:	2b02      	cmp	r3, #2
 8000648:	d107      	bne.n	800065a <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	68db      	ldr	r3, [r3, #12]
 800064e:	683a      	ldr	r2, [r7, #0]
 8000650:	8812      	ldrh	r2, [r2, #0]
 8000652:	431a      	orrs	r2, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	60da      	str	r2, [r3, #12]
 8000658:	e007      	b.n	800066a <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	683a      	ldr	r2, [r7, #0]
 8000660:	8812      	ldrh	r2, [r2, #0]
 8000662:	43d2      	mvns	r2, r2
 8000664:	401a      	ands	r2, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL or CRH
	(*config_reg) |= (PIN_CONFIG << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 800066a:	7bfc      	ldrb	r4, [r7, #15]
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	881b      	ldrh	r3, [r3, #0]
 8000670:	4618      	mov	r0, r3
 8000672:	f7ff fed5 	bl	8000420 <Get_CRLH_Position>
 8000676:	4603      	mov	r3, r0
 8000678:	fa04 f203 	lsl.w	r2, r4, r3
 800067c:	68bb      	ldr	r3, [r7, #8]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	431a      	orrs	r2, r3
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	601a      	str	r2, [r3, #0]
}
 8000686:	bf00      	nop
 8000688:	3714      	adds	r7, #20
 800068a:	46bd      	mov	sp, r7
 800068c:	bd90      	pop	{r4, r7, pc}
	...

08000690 <MCAL_RCC_GetSYS_CLKFreq>:
//1111: SYSCLK divided by 512
const uint8_t AHBPrescTable[16U] = {0,0,0,0,0,0,0,0,1,2,3,4,6,7,8,9}; // Shift 1 right == multiply by 2


uint32_t MCAL_RCC_GetSYS_CLKFreq(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
//	Set and cleared by hardware to indicate which clock source is used as system clock.
//	00: HSI oscillator used as system clock
//	01: HSE oscillator used as system clock
//	10: PLL used as system clock
//	11: not applicable
	switch((RCC->CFGR >> 2)& 0b11)
 8000694:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <MCAL_RCC_GetSYS_CLKFreq+0x34>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	089b      	lsrs	r3, r3, #2
 800069a:	f003 0303 	and.w	r3, r3, #3
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d00a      	beq.n	80006b8 <MCAL_RCC_GetSYS_CLKFreq+0x28>
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d80a      	bhi.n	80006bc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d002      	beq.n	80006b0 <MCAL_RCC_GetSYS_CLKFreq+0x20>
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d002      	beq.n	80006b4 <MCAL_RCC_GetSYS_CLKFreq+0x24>
 80006ae:	e005      	b.n	80006bc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
	{
		case 0:
			return HSI_RC_CLK;
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <MCAL_RCC_GetSYS_CLKFreq+0x38>)
 80006b2:	e003      	b.n	80006bc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;

		case 1:
			// TODO need to calculate it // HSE user should specify it
			return HSE_CLK;
 80006b4:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80006b6:	e001      	b.n	80006bc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;

		case 2:
			// TODO need to calculate it // PLLCLK and PLLMULL and PLL Source MUX
			return 16000000;
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <MCAL_RCC_GetSYS_CLKFreq+0x3c>)
 80006ba:	e7ff      	b.n	80006bc <MCAL_RCC_GetSYS_CLKFreq+0x2c>
			break;
	}
}
 80006bc:	4618      	mov	r0, r3
 80006be:	46bd      	mov	sp, r7
 80006c0:	bc80      	pop	{r7}
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000
 80006c8:	007a1200 	.word	0x007a1200
 80006cc:	00f42400 	.word	0x00f42400

080006d0 <MCAL_RCC_GetHCLKFreq>:

uint32_t MCAL_RCC_GetHCLKFreq(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	// Bits 7:4 HPRE: AHB pre-scaler
	return (MCAL_RCC_GetSYS_CLKFreq() >> AHBPrescTable[(RCC->CFGR >> 4) & 0xF]); // The first shift is multiplication
 80006d4:	f7ff ffdc 	bl	8000690 <MCAL_RCC_GetSYS_CLKFreq>
 80006d8:	4602      	mov	r2, r0
 80006da:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <MCAL_RCC_GetHCLKFreq+0x20>)
 80006dc:	685b      	ldr	r3, [r3, #4]
 80006de:	091b      	lsrs	r3, r3, #4
 80006e0:	f003 030f 	and.w	r3, r3, #15
 80006e4:	4903      	ldr	r1, [pc, #12]	; (80006f4 <MCAL_RCC_GetHCLKFreq+0x24>)
 80006e6:	5ccb      	ldrb	r3, [r1, r3]
 80006e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000
 80006f4:	08000c5c 	.word	0x08000c5c

080006f8 <MCAL_RCC_GetPCLK1Freq>:

uint32_t MCAL_RCC_GetPCLK1Freq(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	// Bits 10:8 PPRE1: APB low-speed pre-scaler (APB1)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 8) & 0b111]); // The first shift is multiplication
 80006fc:	f7ff ffe8 	bl	80006d0 <MCAL_RCC_GetHCLKFreq>
 8000700:	4602      	mov	r2, r0
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <MCAL_RCC_GetPCLK1Freq+0x20>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	0a1b      	lsrs	r3, r3, #8
 8000708:	f003 0307 	and.w	r3, r3, #7
 800070c:	4903      	ldr	r1, [pc, #12]	; (800071c <MCAL_RCC_GetPCLK1Freq+0x24>)
 800070e:	5ccb      	ldrb	r3, [r1, r3]
 8000710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000714:	4618      	mov	r0, r3
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	08000c54 	.word	0x08000c54

08000720 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0
	// Bits 13:11 PPRE2: APB high-speed pre-scaler (APB2)
	return (MCAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR >> 11) & 0b111]); // The first shift is multiplication
 8000724:	f7ff ffd4 	bl	80006d0 <MCAL_RCC_GetHCLKFreq>
 8000728:	4602      	mov	r2, r0
 800072a:	4b05      	ldr	r3, [pc, #20]	; (8000740 <MCAL_RCC_GetPCLK2Freq+0x20>)
 800072c:	685b      	ldr	r3, [r3, #4]
 800072e:	0adb      	lsrs	r3, r3, #11
 8000730:	f003 0307 	and.w	r3, r3, #7
 8000734:	4903      	ldr	r1, [pc, #12]	; (8000744 <MCAL_RCC_GetPCLK2Freq+0x24>)
 8000736:	5ccb      	ldrb	r3, [r1, r3]
 8000738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800073c:	4618      	mov	r0, r3
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	08000c54 	.word	0x08000c54

08000748 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART configuration
 * @retval 			- none
 * Note				- support for now Asynchronous mode & clock 8 MHz
 */
void MCAL_UART_Init(USART_Typedef_t* USARTx, USART_Config_t* UART_Config)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b084      	sub	sp, #16
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	6039      	str	r1, [r7, #0]
	uint32_t pclk, BRR;

	/* 1. Enable the clock for given USART peripheral */
	if(USARTx == USART1)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4a59      	ldr	r2, [pc, #356]	; (80008bc <MCAL_UART_Init+0x174>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d109      	bne.n	800076e <MCAL_UART_Init+0x26>
	{
		RCC_USART1_CLK_EN();
 800075a:	4b59      	ldr	r3, [pc, #356]	; (80008c0 <MCAL_UART_Init+0x178>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	4a58      	ldr	r2, [pc, #352]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6193      	str	r3, [r2, #24]
		Global_USART_Config[0] = UART_Config;
 8000766:	4a57      	ldr	r2, [pc, #348]	; (80008c4 <MCAL_UART_Init+0x17c>)
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	6013      	str	r3, [r2, #0]
 800076c:	e01a      	b.n	80007a4 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a55      	ldr	r2, [pc, #340]	; (80008c8 <MCAL_UART_Init+0x180>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d109      	bne.n	800078a <MCAL_UART_Init+0x42>
	{
		RCC_USART2_CLK_EN();
 8000776:	4b52      	ldr	r3, [pc, #328]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000778:	69db      	ldr	r3, [r3, #28]
 800077a:	4a51      	ldr	r2, [pc, #324]	; (80008c0 <MCAL_UART_Init+0x178>)
 800077c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000780:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[1] = UART_Config;
 8000782:	4a50      	ldr	r2, [pc, #320]	; (80008c4 <MCAL_UART_Init+0x17c>)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	6053      	str	r3, [r2, #4]
 8000788:	e00c      	b.n	80007a4 <MCAL_UART_Init+0x5c>
	}
	else if(USARTx == USART3)
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	4a4f      	ldr	r2, [pc, #316]	; (80008cc <MCAL_UART_Init+0x184>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d108      	bne.n	80007a4 <MCAL_UART_Init+0x5c>
	{
		RCC_USART3_CLK_EN();
 8000792:	4b4b      	ldr	r3, [pc, #300]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000794:	69db      	ldr	r3, [r3, #28]
 8000796:	4a4a      	ldr	r2, [pc, #296]	; (80008c0 <MCAL_UART_Init+0x178>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079c:	61d3      	str	r3, [r2, #28]
		Global_USART_Config[2] = UART_Config;
 800079e:	4a49      	ldr	r2, [pc, #292]	; (80008c4 <MCAL_UART_Init+0x17c>)
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	6093      	str	r3, [r2, #8]
	}
	/* 2. Enable USART Module */
	USARTx->CR1 |= 1<<13;							// bit 13 UE: USART enable
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	68db      	ldr	r3, [r3, #12]
 80007a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	60da      	str	r2, [r3, #12]

	/* 3. Enable USART TX/RX engines according to the USART_Mode configuration item */
	USARTx->CR1 |= UART_Config->USART_Mode; 		// USART_CR1 bit 3 TE: transmitter enable & bit 2 RE: receiver enable
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	68db      	ldr	r3, [r3, #12]
 80007b4:	683a      	ldr	r2, [r7, #0]
 80007b6:	7812      	ldrb	r2, [r2, #0]
 80007b8:	431a      	orrs	r2, r3
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	60da      	str	r2, [r3, #12]

	/* 4. Pay-load width */
	USARTx->CR1 |= UART_Config->Payload_Length;		// USARTx->CR1 bit 12 M: word length
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	68db      	ldr	r3, [r3, #12]
 80007c2:	683a      	ldr	r2, [r7, #0]
 80007c4:	7a12      	ldrb	r2, [r2, #8]
 80007c6:	431a      	orrs	r2, r3
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	60da      	str	r2, [r3, #12]

	/* 5. configuration of parity control bit field */
	USARTx->CR1 |= UART_Config->Parity;				// USARTx->CR1 bit 10 PCE: Parity Control enable bit 9 PS: Parity selection
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	68db      	ldr	r3, [r3, #12]
 80007d0:	683a      	ldr	r2, [r7, #0]
 80007d2:	7a52      	ldrb	r2, [r2, #9]
 80007d4:	431a      	orrs	r2, r3
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	60da      	str	r2, [r3, #12]

	/* 6. configuration the no. of stop bits */
	USARTx->CR2 |= UART_Config->StopBits;			// USART_CR2 bits 13:12 STOP: stop bits
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	691b      	ldr	r3, [r3, #16]
 80007de:	683a      	ldr	r2, [r7, #0]
 80007e0:	7a92      	ldrb	r2, [r2, #10]
 80007e2:	431a      	orrs	r2, r3
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	611a      	str	r2, [r3, #16]


	/* 7. USART HW Flow Control */
	USARTx->CR3 |= UART_Config->HwFlowCtl;			// USART_CR3 bit 9 CTSE: CTS enable bit 8 RTSE: RTS enable
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	683a      	ldr	r2, [r7, #0]
 80007ee:	7ad2      	ldrb	r2, [r2, #11]
 80007f0:	431a      	orrs	r2, r3
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	615a      	str	r2, [r3, #20]


	/* 8. configuration of BRR (baud-rate register) */
	if (USARTx == USART1)							// PCLK2 for USART1
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	4a30      	ldr	r2, [pc, #192]	; (80008bc <MCAL_UART_Init+0x174>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d103      	bne.n	8000806 <MCAL_UART_Init+0xbe>

	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 80007fe:	f7ff ff8f 	bl	8000720 <MCAL_RCC_GetPCLK2Freq>
 8000802:	60f8      	str	r0, [r7, #12]
 8000804:	e002      	b.n	800080c <MCAL_UART_Init+0xc4>
	}
	else											// PCLK1 for USART2, 3

	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000806:	f7ff ff77 	bl	80006f8 <MCAL_RCC_GetPCLK1Freq>
 800080a:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate);
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	011b      	lsls	r3, r3, #4
 8000812:	68fa      	ldr	r2, [r7, #12]
 8000814:	fbb2 f3f3 	udiv	r3, r2, r3
 8000818:	0119      	lsls	r1, r3, #4
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	4613      	mov	r3, r2
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	4413      	add	r3, r2
 8000822:	009a      	lsls	r2, r3, #2
 8000824:	441a      	add	r2, r3
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	fbb2 f2f3 	udiv	r2, r2, r3
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	685b      	ldr	r3, [r3, #4]
 8000834:	011b      	lsls	r3, r3, #4
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	fbb0 f3f3 	udiv	r3, r0, r3
 800083c:	2064      	movs	r0, #100	; 0x64
 800083e:	fb00 f303 	mul.w	r3, r0, r3
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	011b      	lsls	r3, r3, #4
 8000846:	4a22      	ldr	r2, [pc, #136]	; (80008d0 <MCAL_UART_Init+0x188>)
 8000848:	fba2 2303 	umull	r2, r3, r2, r3
 800084c:	095b      	lsrs	r3, r3, #5
 800084e:	f003 030f 	and.w	r3, r3, #15
 8000852:	430b      	orrs	r3, r1
 8000854:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	609a      	str	r2, [r3, #8]

	/* 9. ENABLE / DISABLE Interrupt */
	if (UART_Config->IRQ_Enable != UART_IRQ_Enable_NONE)
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	7b1b      	ldrb	r3, [r3, #12]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d026      	beq.n	80008b2 <MCAL_UART_Init+0x16a>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	68db      	ldr	r3, [r3, #12]
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	7b12      	ldrb	r2, [r2, #12]
 800086c:	431a      	orrs	r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	60da      	str	r2, [r3, #12]

		/* Enable NVIC for USARTx IRQ */
		if (USARTx == USART1)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4a11      	ldr	r2, [pc, #68]	; (80008bc <MCAL_UART_Init+0x174>)
 8000876:	4293      	cmp	r3, r2
 8000878:	d106      	bne.n	8000888 <MCAL_UART_Init+0x140>
			NVIC_IRQ37_USART1_EN();
 800087a:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <MCAL_UART_Init+0x18c>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MCAL_UART_Init+0x18c>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6013      	str	r3, [r2, #0]
			NVIC_IRQ38_USART2_EN();

		else if (USARTx == USART3)
			NVIC_IRQ39_USART3_EN();
	}
}
 8000886:	e014      	b.n	80008b2 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART2)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	4a0f      	ldr	r2, [pc, #60]	; (80008c8 <MCAL_UART_Init+0x180>)
 800088c:	4293      	cmp	r3, r2
 800088e:	d106      	bne.n	800089e <MCAL_UART_Init+0x156>
			NVIC_IRQ38_USART2_EN();
 8000890:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <MCAL_UART_Init+0x18c>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <MCAL_UART_Init+0x18c>)
 8000896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800089a:	6013      	str	r3, [r2, #0]
}
 800089c:	e009      	b.n	80008b2 <MCAL_UART_Init+0x16a>
		else if (USARTx == USART3)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a0a      	ldr	r2, [pc, #40]	; (80008cc <MCAL_UART_Init+0x184>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d105      	bne.n	80008b2 <MCAL_UART_Init+0x16a>
			NVIC_IRQ39_USART3_EN();
 80008a6:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <MCAL_UART_Init+0x18c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <MCAL_UART_Init+0x18c>)
 80008ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b0:	6013      	str	r3, [r2, #0]
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40013800 	.word	0x40013800
 80008c0:	40021000 	.word	0x40021000
 80008c4:	2000001c 	.word	0x2000001c
 80008c8:	40004400 	.word	0x40004400
 80008cc:	40004800 	.word	0x40004800
 80008d0:	51eb851f 	.word	0x51eb851f
 80008d4:	e000e104 	.word	0xe000e104

080008d8 <MCAL_UART_SendData>:
 * 					- the value written in the MSB ( bit 7 or bit 8 depending on the data length ) has no effect
 * 					- because it is replaced by the parity
 * 					- when receiving with the parity enabled the value read in the MSB bit is the received parity bit
 */
void MCAL_UART_SendData(USART_Typedef_t* USARTx, uint16_t* pTxBuffer, enum Polling_mechanism PollingEn)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	60f8      	str	r0, [r7, #12]
 80008e0:	60b9      	str	r1, [r7, #8]
 80008e2:	4613      	mov	r3, r2
 80008e4:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until TXE flag is set in the SR */
	if (PollingEn == enable)
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <MCAL_UART_SendData+0x22>
		 * The TXE bit is set by hardware and it indicates:
		 * The data has been moved from TDR to the shift register and the data transmission has started.
		 * The TDR register is empty.
		 * The next data can be written in the USART_DR register without overwriting the previous data.
		 */
		while (!(USARTx->SR & 1<<7));
 80008ec:	bf00      	nop
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d0f9      	beq.n	80008ee <MCAL_UART_SendData+0x16>
	/* When Transmitting with the parity enabled (PCE bit set to 1 in the USART_CR1 register),
	 * the value written in the MSB (bit 7 or bit 8 depending on the data length) has no effect
	 * because it is replaced by the parity.
	 * When receiving with the parity enabled, the value read in the MSB bit is the received parity bit.
	 */
	if (USARTx == USART1)
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4a17      	ldr	r2, [pc, #92]	; (800095c <MCAL_UART_SendData+0x84>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d10a      	bne.n	8000918 <MCAL_UART_SendData+0x40>
	{
		if (Global_USART_Config[0]->Payload_Length == UART_Payload_Length_8B)
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <MCAL_UART_SendData+0x88>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	7a1b      	ldrb	r3, [r3, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d122      	bne.n	8000952 <MCAL_UART_SendData+0x7a>
		{
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 800090c:	68bb      	ldr	r3, [r7, #8]
 800090e:	881b      	ldrh	r3, [r3, #0]
 8000910:	b2da      	uxtb	r2, r3
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	605a      	str	r2, [r3, #4]
		else if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_9B)
		{
			USARTx->DR = (*pTxBuffer) & (uint16_t)0x1FF ;
		}
	}
}
 8000916:	e01c      	b.n	8000952 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART2)
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MCAL_UART_SendData+0x8c>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d10a      	bne.n	8000936 <MCAL_UART_SendData+0x5e>
		if (Global_USART_Config[1]->Payload_Length == UART_Payload_Length_8B)
 8000920:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <MCAL_UART_SendData+0x88>)
 8000922:	685b      	ldr	r3, [r3, #4]
 8000924:	7a1b      	ldrb	r3, [r3, #8]
 8000926:	2b00      	cmp	r3, #0
 8000928:	d113      	bne.n	8000952 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	881b      	ldrh	r3, [r3, #0]
 800092e:	b2da      	uxtb	r2, r3
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	605a      	str	r2, [r3, #4]
}
 8000934:	e00d      	b.n	8000952 <MCAL_UART_SendData+0x7a>
	else if (USARTx == USART3)
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	4a0b      	ldr	r2, [pc, #44]	; (8000968 <MCAL_UART_SendData+0x90>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d109      	bne.n	8000952 <MCAL_UART_SendData+0x7a>
		if (Global_USART_Config[2]->Payload_Length == UART_Payload_Length_8B)
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MCAL_UART_SendData+0x88>)
 8000940:	689b      	ldr	r3, [r3, #8]
 8000942:	7a1b      	ldrb	r3, [r3, #8]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <MCAL_UART_SendData+0x7a>
			USARTx->DR = (*pTxBuffer) & (uint8_t)0xFF ;
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	881b      	ldrh	r3, [r3, #0]
 800094c:	b2da      	uxtb	r2, r3
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	605a      	str	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3714      	adds	r7, #20
 8000956:	46bd      	mov	sp, r7
 8000958:	bc80      	pop	{r7}
 800095a:	4770      	bx	lr
 800095c:	40013800 	.word	0x40013800
 8000960:	2000001c 	.word	0x2000001c
 8000964:	40004400 	.word	0x40004400
 8000968:	40004800 	.word	0x40004800

0800096c <MCAL_UART_ReceiveData>:
	/* Wait till TC flag is set in the SR */
	while(!(USARTx->SR & 1<<6));
}

void MCAL_UART_ReceiveData(USART_Typedef_t* USARTx, uint16_t* pRxBuffer, enum Polling_mechanism PollingEn)
{
 800096c:	b480      	push	{r7}
 800096e:	b085      	sub	sp, #20
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	4613      	mov	r3, r2
 8000978:	71fb      	strb	r3, [r7, #7]
	/* 1. Wait until RXNE flag is set in the SR */
	if (PollingEn == enable)
 800097a:	79fb      	ldrb	r3, [r7, #7]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d106      	bne.n	800098e <MCAL_UART_ReceiveData+0x22>
	{
		while (!(USARTx->SR & 1<<5));
 8000980:	bf00      	nop
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	2b00      	cmp	r3, #0
 800098c:	d0f9      	beq.n	8000982 <MCAL_UART_ReceiveData+0x16>
	}

	/* 2. Check the USART_WordLength item for 9-bit or 8-bit in a frame */
	if (USARTx == USART1)
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4a28      	ldr	r2, [pc, #160]	; (8000a34 <MCAL_UART_ReceiveData+0xc8>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d115      	bne.n	80009c2 <MCAL_UART_ReceiveData+0x56>
			}
		}
		/* 8 Bits Data */
		else
		{
			if (Global_USART_Config[0]->Parity == UART_Parity_NONE)
 8000996:	4b28      	ldr	r3, [pc, #160]	; (8000a38 <MCAL_UART_ReceiveData+0xcc>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	7a5b      	ldrb	r3, [r3, #9]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d107      	bne.n	80009b0 <MCAL_UART_ReceiveData+0x44>
			{
				/* All 8 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	685b      	ldr	r3, [r3, #4]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	b29a      	uxth	r2, r3
 80009aa:	68bb      	ldr	r3, [r7, #8]
 80009ac:	801a      	strh	r2, [r3, #0]
				/* just least 7 bits are data */
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
			}
		}
	}
}
 80009ae:	e03b      	b.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	685b      	ldr	r3, [r3, #4]
 80009b4:	b29b      	uxth	r3, r3
 80009b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ba:	b29a      	uxth	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	801a      	strh	r2, [r3, #0]
}
 80009c0:	e032      	b.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART2)
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	4a1d      	ldr	r2, [pc, #116]	; (8000a3c <MCAL_UART_ReceiveData+0xd0>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d115      	bne.n	80009f6 <MCAL_UART_ReceiveData+0x8a>
			if (Global_USART_Config[1]->Parity == UART_Parity_NONE)
 80009ca:	4b1b      	ldr	r3, [pc, #108]	; (8000a38 <MCAL_UART_ReceiveData+0xcc>)
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	7a5b      	ldrb	r3, [r3, #9]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d107      	bne.n	80009e4 <MCAL_UART_ReceiveData+0x78>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	b29b      	uxth	r3, r3
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	b29a      	uxth	r2, r3
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	801a      	strh	r2, [r3, #0]
}
 80009e2:	e021      	b.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	b29b      	uxth	r3, r3
 80009ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009ee:	b29a      	uxth	r2, r3
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	801a      	strh	r2, [r3, #0]
}
 80009f4:	e018      	b.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
	else if (USARTx == USART3)
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4a11      	ldr	r2, [pc, #68]	; (8000a40 <MCAL_UART_ReceiveData+0xd4>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d114      	bne.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
			if (Global_USART_Config[2]->Parity == UART_Parity_NONE)
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MCAL_UART_ReceiveData+0xcc>)
 8000a00:	689b      	ldr	r3, [r3, #8]
 8000a02:	7a5b      	ldrb	r3, [r3, #9]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d107      	bne.n	8000a18 <MCAL_UART_ReceiveData+0xac>
				*pRxBuffer = USARTx->DR & (uint8_t)0xFF  ;
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	b29b      	uxth	r3, r3
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	b29a      	uxth	r2, r3
 8000a12:	68bb      	ldr	r3, [r7, #8]
 8000a14:	801a      	strh	r2, [r3, #0]
}
 8000a16:	e007      	b.n	8000a28 <MCAL_UART_ReceiveData+0xbc>
				*pRxBuffer = USARTx->DR & (uint8_t)0x7F ;
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	685b      	ldr	r3, [r3, #4]
 8000a1c:	b29b      	uxth	r3, r3
 8000a1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	801a      	strh	r2, [r3, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	40013800 	.word	0x40013800
 8000a38:	2000001c 	.word	0x2000001c
 8000a3c:	40004400 	.word	0x40004400
 8000a40:	40004800 	.word	0x40004800

08000a44 <MCAL_UART_GPIO_Set_Pins>:
 * @param[in]		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			- None
 * @Notes			- Should enable the corresponding ALT & GPIO in RCC clock . Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins(USART_Typedef_t* USARTx)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t Pin_Config;

	if (USARTx == USART1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4a3b      	ldr	r2, [pc, #236]	; (8000b3c <MCAL_UART_GPIO_Set_Pins+0xf8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d118      	bne.n	8000a86 <MCAL_UART_GPIO_Set_Pins+0x42>
		// PA10 Rx
		// PA11 CTS
		// PA12 RTS

		// PA9 Tx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_9;
 8000a54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a58:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	4619      	mov	r1, r3
 8000a68:	4835      	ldr	r0, [pc, #212]	; (8000b40 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000a6a:	f7ff fd91 	bl	8000590 <MCAL_GPIO_Init>

		// PA10 Rx
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a72:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a74:	2308      	movs	r3, #8
 8000a76:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a78:	f107 030c 	add.w	r3, r7, #12
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4830      	ldr	r0, [pc, #192]	; (8000b40 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000a80:	f7ff fd86 	bl	8000590 <MCAL_GPIO_Init>
			Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
		}
	}
}
 8000a84:	e055      	b.n	8000b32 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART2)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	4a2e      	ldr	r2, [pc, #184]	; (8000b44 <MCAL_UART_GPIO_Set_Pins+0x100>)
 8000a8a:	4293      	cmp	r3, r2
 8000a8c:	d125      	bne.n	8000ada <MCAL_UART_GPIO_Set_Pins+0x96>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_2;
 8000a8e:	2304      	movs	r3, #4
 8000a90:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a92:	2306      	movs	r3, #6
 8000a94:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000a96:	2301      	movs	r3, #1
 8000a98:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000a9a:	f107 030c 	add.w	r3, r7, #12
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4827      	ldr	r0, [pc, #156]	; (8000b40 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000aa2:	f7ff fd75 	bl	8000590 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_3;
 8000aa6:	2308      	movs	r3, #8
 8000aa8:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000aaa:	2308      	movs	r3, #8
 8000aac:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4822      	ldr	r0, [pc, #136]	; (8000b40 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000ab6:	f7ff fd6b 	bl	8000590 <MCAL_GPIO_Init>
		if (Global_USART_Config[1]->HwFlowCtl || Global_USART_Config[1]->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000aba:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	7adb      	ldrb	r3, [r3, #11]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d036      	beq.n	8000b32 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_0;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOA, &Pin_Config);
 8000acc:	f107 030c 	add.w	r3, r7, #12
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	481b      	ldr	r0, [pc, #108]	; (8000b40 <MCAL_UART_GPIO_Set_Pins+0xfc>)
 8000ad4:	f7ff fd5c 	bl	8000590 <MCAL_GPIO_Init>
}
 8000ad8:	e02b      	b.n	8000b32 <MCAL_UART_GPIO_Set_Pins+0xee>
	else if (USARTx == USART3)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	4a1b      	ldr	r2, [pc, #108]	; (8000b4c <MCAL_UART_GPIO_Set_Pins+0x108>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d127      	bne.n	8000b32 <MCAL_UART_GPIO_Set_Pins+0xee>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_10;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000ae8:	2306      	movs	r3, #6
 8000aea:	73bb      	strb	r3, [r7, #14]
		Pin_Config.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000aec:	2301      	movs	r3, #1
 8000aee:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000af0:	f107 030c 	add.w	r3, r7, #12
 8000af4:	4619      	mov	r1, r3
 8000af6:	4816      	ldr	r0, [pc, #88]	; (8000b50 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000af8:	f7ff fd4a 	bl	8000590 <MCAL_GPIO_Init>
		Pin_Config.GPIO_PinNumber = GPIO_PIN_11;
 8000afc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b00:	81bb      	strh	r3, [r7, #12]
		Pin_Config.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000b02:	2308      	movs	r3, #8
 8000b04:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4810      	ldr	r0, [pc, #64]	; (8000b50 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000b0e:	f7ff fd3f 	bl	8000590 <MCAL_GPIO_Init>
		if (Global_USART_Config[2]->HwFlowCtl || Global_USART_Config[2]->HwFlowCtl == UART_HwFlowCtl_CTS)
 8000b12:	4b0d      	ldr	r3, [pc, #52]	; (8000b48 <MCAL_UART_GPIO_Set_Pins+0x104>)
 8000b14:	689b      	ldr	r3, [r3, #8]
 8000b16:	7adb      	ldrb	r3, [r3, #11]
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d00a      	beq.n	8000b32 <MCAL_UART_GPIO_Set_Pins+0xee>
			Pin_Config.GPIO_PinNumber = GPIO_PIN_13;
 8000b1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b20:	81bb      	strh	r3, [r7, #12]
			Pin_Config.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73bb      	strb	r3, [r7, #14]
			MCAL_GPIO_Init(GPIOB, &Pin_Config);
 8000b26:	f107 030c 	add.w	r3, r7, #12
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4808      	ldr	r0, [pc, #32]	; (8000b50 <MCAL_UART_GPIO_Set_Pins+0x10c>)
 8000b2e:	f7ff fd2f 	bl	8000590 <MCAL_GPIO_Init>
}
 8000b32:	bf00      	nop
 8000b34:	3710      	adds	r7, #16
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40013800 	.word	0x40013800
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40004400 	.word	0x40004400
 8000b48:	2000001c 	.word	0x2000001c
 8000b4c:	40004800 	.word	0x40004800
 8000b50:	40010c00 	.word	0x40010c00

08000b54 <USART1_IRQHandler>:

void USART1_IRQHandler (void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	Global_USART_Config[0]->P_IRQ_CallBack();
 8000b58:	4b02      	ldr	r3, [pc, #8]	; (8000b64 <USART1_IRQHandler+0x10>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	691b      	ldr	r3, [r3, #16]
 8000b5e:	4798      	blx	r3
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	2000001c 	.word	0x2000001c

08000b68 <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	Global_USART_Config[1]->P_IRQ_CallBack();
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <USART2_IRQHandler+0x10>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	691b      	ldr	r3, [r3, #16]
 8000b72:	4798      	blx	r3
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000001c 	.word	0x2000001c

08000b7c <USART3_IRQHandler>:

void USART3_IRQHandler (void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
	Global_USART_Config[2]->P_IRQ_CallBack();
 8000b80:	4b02      	ldr	r3, [pc, #8]	; (8000b8c <USART3_IRQHandler+0x10>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	691b      	ldr	r3, [r3, #16]
 8000b86:	4798      	blx	r3
}
 8000b88:	bf00      	nop
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	2000001c 	.word	0x2000001c

08000b90 <main>:

#include "05_USART_Test_1_Debugging_Using_Polling.h"

/* =========== Main Program ========== */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	USART_Test_1_Debugging_Using_Polling();
 8000b94:	f7ff faec 	bl	8000170 <USART_Test_1_Debugging_Using_Polling>
	return 0;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000ba0:	480d      	ldr	r0, [pc, #52]	; (8000bd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ba2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ba4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ba8:	480c      	ldr	r0, [pc, #48]	; (8000bdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000baa:	490d      	ldr	r1, [pc, #52]	; (8000be0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bac:	4a0d      	ldr	r2, [pc, #52]	; (8000be4 <LoopForever+0xe>)
  movs r3, #0
 8000bae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bb0:	e002      	b.n	8000bb8 <LoopCopyDataInit>

08000bb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bb6:	3304      	adds	r3, #4

08000bb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bbc:	d3f9      	bcc.n	8000bb2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	; (8000be8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bc0:	4c0a      	ldr	r4, [pc, #40]	; (8000bec <LoopForever+0x16>)
  movs r3, #0
 8000bc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bc4:	e001      	b.n	8000bca <LoopFillZerobss>

08000bc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bc8:	3204      	adds	r2, #4

08000bca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bcc:	d3fb      	bcc.n	8000bc6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bce:	f000 f811 	bl	8000bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bd2:	f7ff ffdd 	bl	8000b90 <main>

08000bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bd6:	e7fe      	b.n	8000bd6 <LoopForever>
  ldr   r0, =_estack
 8000bd8:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000bdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000be0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000be4:	08000c74 	.word	0x08000c74
  ldr r2, =_sbss
 8000be8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bec:	20000068 	.word	0x20000068

08000bf0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC1_2_IRQHandler>
	...

08000bf4 <__libc_init_array>:
 8000bf4:	b570      	push	{r4, r5, r6, lr}
 8000bf6:	2500      	movs	r5, #0
 8000bf8:	4e0c      	ldr	r6, [pc, #48]	; (8000c2c <__libc_init_array+0x38>)
 8000bfa:	4c0d      	ldr	r4, [pc, #52]	; (8000c30 <__libc_init_array+0x3c>)
 8000bfc:	1ba4      	subs	r4, r4, r6
 8000bfe:	10a4      	asrs	r4, r4, #2
 8000c00:	42a5      	cmp	r5, r4
 8000c02:	d109      	bne.n	8000c18 <__libc_init_array+0x24>
 8000c04:	f000 f81a 	bl	8000c3c <_init>
 8000c08:	2500      	movs	r5, #0
 8000c0a:	4e0a      	ldr	r6, [pc, #40]	; (8000c34 <__libc_init_array+0x40>)
 8000c0c:	4c0a      	ldr	r4, [pc, #40]	; (8000c38 <__libc_init_array+0x44>)
 8000c0e:	1ba4      	subs	r4, r4, r6
 8000c10:	10a4      	asrs	r4, r4, #2
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d105      	bne.n	8000c22 <__libc_init_array+0x2e>
 8000c16:	bd70      	pop	{r4, r5, r6, pc}
 8000c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c1c:	4798      	blx	r3
 8000c1e:	3501      	adds	r5, #1
 8000c20:	e7ee      	b.n	8000c00 <__libc_init_array+0xc>
 8000c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c26:	4798      	blx	r3
 8000c28:	3501      	adds	r5, #1
 8000c2a:	e7f2      	b.n	8000c12 <__libc_init_array+0x1e>
 8000c2c:	08000c6c 	.word	0x08000c6c
 8000c30:	08000c6c 	.word	0x08000c6c
 8000c34:	08000c6c 	.word	0x08000c6c
 8000c38:	08000c70 	.word	0x08000c70

08000c3c <_init>:
 8000c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c3e:	bf00      	nop
 8000c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c42:	bc08      	pop	{r3}
 8000c44:	469e      	mov	lr, r3
 8000c46:	4770      	bx	lr

08000c48 <_fini>:
 8000c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c4a:	bf00      	nop
 8000c4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c4e:	bc08      	pop	{r3}
 8000c50:	469e      	mov	lr, r3
 8000c52:	4770      	bx	lr
