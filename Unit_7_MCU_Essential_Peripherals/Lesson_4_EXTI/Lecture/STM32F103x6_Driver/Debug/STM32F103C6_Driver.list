
STM32F103C6_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000da0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  4 .ARM          00000000  08000f18  08000f18  00010f20  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f18  08000f20  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f18  08000f18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f1c  08000f1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000f20  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000f20  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010f20  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001162  00000000  00000000  00010f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000068c  00000000  00000000  000120ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00000a30  00000000  00000000  00012737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00013168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000180  00000000  00000000  00013350  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001069  00000000  00000000  000134d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012f5  00000000  00000000  00014539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00005939  00000000  00000000  0001582e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0001b167  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000598  00000000  00000000  0001b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000eb8 	.word	0x08000eb8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000eb8 	.word	0x08000eb8

08000170 <EXTI_Test_1_LCD_Push_Button>:
static void delay_ms(uint32_t delay);
static void EXTI9_CallBack(void);

/* =========== Main Program ========== */
void EXTI_Test_1_LCD_Push_Button(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b088      	sub	sp, #32
 8000174:	af00      	add	r7, sp, #0
	// Initializing the clock
	clock_init();
 8000176:	f000 f835 	bl	80001e4 <clock_init>

	// Initializing the LCD
	HAL_LCD_INIT();
 800017a:	f000 f989 	bl	8000490 <HAL_LCD_INIT>

	HAL_LCD_WRITE_STRING("HEY THERE !        Mina Karam");
 800017e:	4815      	ldr	r0, [pc, #84]	; (80001d4 <EXTI_Test_1_LCD_Push_Button+0x64>)
 8000180:	f000 f9e4 	bl	800054c <HAL_LCD_WRITE_STRING>
	delay_ms(30);
 8000184:	201e      	movs	r0, #30
 8000186:	f000 f847 	bl	8000218 <delay_ms>
	HAL_LCD_CLEAR_SCREEN();
 800018a:	f000 f93f 	bl	800040c <HAL_LCD_CLEAR_SCREEN>
	/*
	 * Configuration of the external interrupt pin 9
	 */

	/* Select the port and pin */
	EXTI_Config.EXTI_Pin = EXTI9PB9;
 800018e:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <EXTI_Test_1_LCD_Push_Button+0x68>)
 8000190:	f107 030c 	add.w	r3, r7, #12
 8000194:	ca07      	ldmia	r2, {r0, r1, r2}
 8000196:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	/* Select the trigger case ---> Rising */
	EXTI_Config.Trigger_Case = EXTI_RT;
 800019a:	2300      	movs	r3, #0
 800019c:	763b      	strb	r3, [r7, #24]

	/* Set the callback of the interrupt */
	EXTI_Config.P_IRQ_CallBack = EXTI9_CallBack;
 800019e:	4b0f      	ldr	r3, [pc, #60]	; (80001dc <EXTI_Test_1_LCD_Push_Button+0x6c>)
 80001a0:	61fb      	str	r3, [r7, #28]

	/* Enable EXTI IRQ*/
	EXTI_Config.IRQ_Enable = EXTI_IRQ_Enable;
 80001a2:	2301      	movs	r3, #1
 80001a4:	767b      	strb	r3, [r7, #25]

	MCAL_EXTI_GPIO_Init(&EXTI_Config);
 80001a6:	f107 030c 	add.w	r3, r7, #12
 80001aa:	4618      	mov	r0, r3
 80001ac:	f000 f9fb 	bl	80005a6 <MCAL_EXTI_GPIO_Init>


	IRQ_Flag = 1;
 80001b0:	4b0b      	ldr	r3, [pc, #44]	; (80001e0 <EXTI_Test_1_LCD_Push_Button+0x70>)
 80001b2:	2201      	movs	r2, #1
 80001b4:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if (IRQ_Flag)
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <EXTI_Test_1_LCD_Push_Button+0x70>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	2b00      	cmp	r3, #0
 80001bc:	d004      	beq.n	80001c8 <EXTI_Test_1_LCD_Push_Button+0x58>
		{
			HAL_LCD_CLEAR_SCREEN();
 80001be:	f000 f925 	bl	800040c <HAL_LCD_CLEAR_SCREEN>
			IRQ_Flag = 0;
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <EXTI_Test_1_LCD_Push_Button+0x70>)
 80001c4:	2200      	movs	r2, #0
 80001c6:	701a      	strb	r2, [r3, #0]
		}

		delay_ms(1000);
 80001c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001cc:	f000 f824 	bl	8000218 <delay_ms>
		if (IRQ_Flag)
 80001d0:	e7f1      	b.n	80001b6 <EXTI_Test_1_LCD_Push_Button+0x46>
 80001d2:	bf00      	nop
 80001d4:	08000ed0 	.word	0x08000ed0
 80001d8:	08000ef0 	.word	0x08000ef0
 80001dc:	08000255 	.word	0x08000255
 80001e0:	2000001c 	.word	0x2000001c

080001e4 <clock_init>:
	}
}

/* ======== clock init definition ======= */
static void clock_init(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
	/* Enable clock GPIOA */
	RCC_GPIOA_CLK_EN();
 80001e8:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <clock_init+0x30>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	4a09      	ldr	r2, [pc, #36]	; (8000214 <clock_init+0x30>)
 80001ee:	f043 0304 	orr.w	r3, r3, #4
 80001f2:	6193      	str	r3, [r2, #24]

	/* Enable clock GPIOB */
	RCC_GPIOB_CLK_EN();
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <clock_init+0x30>)
 80001f6:	699b      	ldr	r3, [r3, #24]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <clock_init+0x30>)
 80001fa:	f043 0308 	orr.w	r3, r3, #8
 80001fe:	6193      	str	r3, [r2, #24]

	/* Enable Clock For AFIO */
	RCC_AFIO_CLK_EN();
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <clock_init+0x30>)
 8000202:	699b      	ldr	r3, [r3, #24]
 8000204:	4a03      	ldr	r2, [pc, #12]	; (8000214 <clock_init+0x30>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6193      	str	r3, [r2, #24]
}
 800020c:	bf00      	nop
 800020e:	46bd      	mov	sp, r7
 8000210:	bc80      	pop	{r7}
 8000212:	4770      	bx	lr
 8000214:	40021000 	.word	0x40021000

08000218 <delay_ms>:

static void delay_ms(uint32_t delay)
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < delay; i++)
 8000220:	2300      	movs	r3, #0
 8000222:	60fb      	str	r3, [r7, #12]
 8000224:	e00b      	b.n	800023e <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	e002      	b.n	8000232 <delay_ms+0x1a>
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	3301      	adds	r3, #1
 8000230:	60bb      	str	r3, [r7, #8]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	2bfe      	cmp	r3, #254	; 0xfe
 8000236:	d9f9      	bls.n	800022c <delay_ms+0x14>
	for (i = 0; i < delay; i++)
 8000238:	68fb      	ldr	r3, [r7, #12]
 800023a:	3301      	adds	r3, #1
 800023c:	60fb      	str	r3, [r7, #12]
 800023e:	68fa      	ldr	r2, [r7, #12]
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	429a      	cmp	r2, r3
 8000244:	d3ef      	bcc.n	8000226 <delay_ms+0xe>
	}
}
 8000246:	bf00      	nop
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr
	...

08000254 <EXTI9_CallBack>:

/* ======== CallBack definition ======= */
static void EXTI9_CallBack(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <EXTI9_CallBack+0x1c>)
 800025a:	2201      	movs	r2, #1
 800025c:	701a      	strb	r2, [r3, #0]
	HAL_LCD_WRITE_STRING("IRQ EXTI9 has happened _|- ");
 800025e:	4805      	ldr	r0, [pc, #20]	; (8000274 <EXTI9_CallBack+0x20>)
 8000260:	f000 f974 	bl	800054c <HAL_LCD_WRITE_STRING>
	delay_ms(1000);
 8000264:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000268:	f7ff ffd6 	bl	8000218 <delay_ms>
}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000001c 	.word	0x2000001c
 8000274:	08000efc 	.word	0x08000efc

08000278 <delay_ms>:

static void HAL_LCD_KICK(void);

// Function to make delay_ms 1ms
static void delay_ms(uint32_t delay)
{
 8000278:	b480      	push	{r7}
 800027a:	b085      	sub	sp, #20
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < delay; i++)
 8000280:	2300      	movs	r3, #0
 8000282:	60fb      	str	r3, [r7, #12]
 8000284:	e00b      	b.n	800029e <delay_ms+0x26>
	{
		for (j = 0; j < 255; j++);
 8000286:	2300      	movs	r3, #0
 8000288:	60bb      	str	r3, [r7, #8]
 800028a:	e002      	b.n	8000292 <delay_ms+0x1a>
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	3301      	adds	r3, #1
 8000290:	60bb      	str	r3, [r7, #8]
 8000292:	68bb      	ldr	r3, [r7, #8]
 8000294:	2bfe      	cmp	r3, #254	; 0xfe
 8000296:	d9f9      	bls.n	800028c <delay_ms+0x14>
	for (i = 0; i < delay; i++)
 8000298:	68fb      	ldr	r3, [r7, #12]
 800029a:	3301      	adds	r3, #1
 800029c:	60fb      	str	r3, [r7, #12]
 800029e:	68fa      	ldr	r2, [r7, #12]
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d3ef      	bcc.n	8000286 <delay_ms+0xe>
	}
}
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	3714      	adds	r7, #20
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bc80      	pop	{r7}
 80002b0:	4770      	bx	lr
	...

080002b4 <LCD_GPIO_INIT>:

static void LCD_GPIO_INIT(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	af00      	add	r7, sp, #0
	// ======================= Set CTRL Switches to Output ===================

	// RS_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.GPIO_PinNumber = RS_SWITCH;
 80002b8:	4b52      	ldr	r3, [pc, #328]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002be:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002c0:	4b50      	ldr	r3, [pc, #320]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002c2:	2204      	movs	r2, #4
 80002c4:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002c6:	4b4f      	ldr	r3, [pc, #316]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002c8:	2201      	movs	r2, #1
 80002ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80002cc:	494d      	ldr	r1, [pc, #308]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002ce:	484e      	ldr	r0, [pc, #312]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80002d0:	f000 fcf8 	bl	8000cc4 <MCAL_GPIO_Init>

	//RW_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.GPIO_PinNumber = RW_SWITCH;
 80002d4:	4b4b      	ldr	r3, [pc, #300]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002da:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002dc:	4b49      	ldr	r3, [pc, #292]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002de:	2204      	movs	r2, #4
 80002e0:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002e2:	4b48      	ldr	r3, [pc, #288]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002e4:	2201      	movs	r2, #1
 80002e6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80002e8:	4946      	ldr	r1, [pc, #280]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002ea:	4847      	ldr	r0, [pc, #284]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80002ec:	f000 fcea 	bl	8000cc4 <MCAL_GPIO_Init>

	//Enable_SWITCH is Output with Speed 10 MHz (push-pull) mode
	PinConfig.GPIO_PinNumber = EN_SWITCH;
 80002f0:	4b44      	ldr	r3, [pc, #272]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002f6:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f8:	4b42      	ldr	r3, [pc, #264]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80002fa:	2204      	movs	r2, #4
 80002fc:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80002fe:	4b41      	ldr	r3, [pc, #260]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000300:	2201      	movs	r2, #1
 8000302:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000304:	493f      	ldr	r1, [pc, #252]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000306:	4840      	ldr	r0, [pc, #256]	; (8000408 <LCD_GPIO_INIT+0x154>)
 8000308:	f000 fcdc 	bl	8000cc4 <MCAL_GPIO_Init>

	// =================== Set LCD Port to Output with Speed 10 MHz (push-pull) mode ==============

	// SET THE NEXT 8 PINS AS INPUT
	PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800030c:	4b3d      	ldr	r3, [pc, #244]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800030e:	2201      	movs	r2, #1
 8000310:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000312:	4b3c      	ldr	r3, [pc, #240]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000314:	2204      	movs	r2, #4
 8000316:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000318:	4b3a      	ldr	r3, [pc, #232]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800031a:	2201      	movs	r2, #1
 800031c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800031e:	4939      	ldr	r1, [pc, #228]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000320:	4839      	ldr	r0, [pc, #228]	; (8000408 <LCD_GPIO_INIT+0x154>)
 8000322:	f000 fccf 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_1;
 8000326:	4b37      	ldr	r3, [pc, #220]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000328:	2202      	movs	r2, #2
 800032a:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800032c:	4b35      	ldr	r3, [pc, #212]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800032e:	2204      	movs	r2, #4
 8000330:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000332:	4b34      	ldr	r3, [pc, #208]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000334:	2201      	movs	r2, #1
 8000336:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000338:	4932      	ldr	r1, [pc, #200]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800033a:	4833      	ldr	r0, [pc, #204]	; (8000408 <LCD_GPIO_INIT+0x154>)
 800033c:	f000 fcc2 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_2;
 8000340:	4b30      	ldr	r3, [pc, #192]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000342:	2204      	movs	r2, #4
 8000344:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000346:	4b2f      	ldr	r3, [pc, #188]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000348:	2204      	movs	r2, #4
 800034a:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800034c:	4b2d      	ldr	r3, [pc, #180]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800034e:	2201      	movs	r2, #1
 8000350:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000352:	492c      	ldr	r1, [pc, #176]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000354:	482c      	ldr	r0, [pc, #176]	; (8000408 <LCD_GPIO_INIT+0x154>)
 8000356:	f000 fcb5 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_3;
 800035a:	4b2a      	ldr	r3, [pc, #168]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800035c:	2208      	movs	r2, #8
 800035e:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000360:	4b28      	ldr	r3, [pc, #160]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000362:	2204      	movs	r2, #4
 8000364:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000366:	4b27      	ldr	r3, [pc, #156]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000368:	2201      	movs	r2, #1
 800036a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 800036c:	4925      	ldr	r1, [pc, #148]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800036e:	4826      	ldr	r0, [pc, #152]	; (8000408 <LCD_GPIO_INIT+0x154>)
 8000370:	f000 fca8 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_4;
 8000374:	4b23      	ldr	r3, [pc, #140]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000376:	2210      	movs	r2, #16
 8000378:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800037a:	4b22      	ldr	r3, [pc, #136]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800037c:	2204      	movs	r2, #4
 800037e:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 8000380:	4b20      	ldr	r3, [pc, #128]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000382:	2201      	movs	r2, #1
 8000384:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 8000386:	491f      	ldr	r1, [pc, #124]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <LCD_GPIO_INIT+0x154>)
 800038a:	f000 fc9b 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_5;
 800038e:	4b1d      	ldr	r3, [pc, #116]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000390:	2220      	movs	r2, #32
 8000392:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000394:	4b1b      	ldr	r3, [pc, #108]	; (8000404 <LCD_GPIO_INIT+0x150>)
 8000396:	2204      	movs	r2, #4
 8000398:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 800039a:	4b1a      	ldr	r3, [pc, #104]	; (8000404 <LCD_GPIO_INIT+0x150>)
 800039c:	2201      	movs	r2, #1
 800039e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80003a0:	4918      	ldr	r1, [pc, #96]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003a2:	4819      	ldr	r0, [pc, #100]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003a4:	f000 fc8e 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_6;
 80003a8:	4b16      	ldr	r3, [pc, #88]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003aa:	2240      	movs	r2, #64	; 0x40
 80003ac:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003ae:	4b15      	ldr	r3, [pc, #84]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003b0:	2204      	movs	r2, #4
 80003b2:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80003b4:	4b13      	ldr	r3, [pc, #76]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003b6:	2201      	movs	r2, #1
 80003b8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80003ba:	4912      	ldr	r1, [pc, #72]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003bc:	4812      	ldr	r0, [pc, #72]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003be:	f000 fc81 	bl	8000cc4 <MCAL_GPIO_Init>

	PinConfig.GPIO_PinNumber = GPIO_PIN_7;
 80003c2:	4b10      	ldr	r3, [pc, #64]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	801a      	strh	r2, [r3, #0]
	PinConfig.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c8:	4b0e      	ldr	r3, [pc, #56]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003ca:	2204      	movs	r2, #4
 80003cc:	709a      	strb	r2, [r3, #2]
	PinConfig.GPIO_OUTPUT_SPEED = GPIO_SPEED_10M;
 80003ce:	4b0d      	ldr	r3, [pc, #52]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinConfig);
 80003d4:	490b      	ldr	r1, [pc, #44]	; (8000404 <LCD_GPIO_INIT+0x150>)
 80003d6:	480c      	ldr	r0, [pc, #48]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003d8:	f000 fc74 	bl	8000cc4 <MCAL_GPIO_Init>

	// Reset EN_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003e2:	4809      	ldr	r0, [pc, #36]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003e4:	f000 fced 	bl	8000dc2 <MCAL_GPIO_WritePin>
	// Reset RS_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003ee:	4806      	ldr	r0, [pc, #24]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003f0:	f000 fce7 	bl	8000dc2 <MCAL_GPIO_WritePin>
	// Reset RW_SWITCH PIN
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003fa:	4803      	ldr	r0, [pc, #12]	; (8000408 <LCD_GPIO_INIT+0x154>)
 80003fc:	f000 fce1 	bl	8000dc2 <MCAL_GPIO_WritePin>

}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}
 8000404:	20000020 	.word	0x20000020
 8000408:	40010800 	.word	0x40010800

0800040c <HAL_LCD_CLEAR_SCREEN>:
/* ========== Functions Definitions ========= */
/* ========================================== */

// Function to clear screen of LCD
void HAL_LCD_CLEAR_SCREEN(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
	HAL_LCD_WRITE_COMMAND(LCD_CMD_CLEAR_SCREEN);
 8000410:	2001      	movs	r0, #1
 8000412:	f000 f857 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
	...

0800041c <HAL_LCD_KICK>:

// Kick Start
static void HAL_LCD_KICK(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	// Set Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000420:	2201      	movs	r2, #1
 8000422:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000426:	4807      	ldr	r0, [pc, #28]	; (8000444 <HAL_LCD_KICK+0x28>)
 8000428:	f000 fccb 	bl	8000dc2 <MCAL_GPIO_WritePin>

	// AC Characteristics : Enable cycle time (R & W ) = 500 ns
	delay_ms(50);
 800042c:	2032      	movs	r0, #50	; 0x32
 800042e:	f7ff ff23 	bl	8000278 <delay_ms>

	// Reset Enable bit
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 8000432:	2200      	movs	r2, #0
 8000434:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000438:	4802      	ldr	r0, [pc, #8]	; (8000444 <HAL_LCD_KICK+0x28>)
 800043a:	f000 fcc2 	bl	8000dc2 <MCAL_GPIO_WritePin>
}
 800043e:	bf00      	nop
 8000440:	bd80      	pop	{r7, pc}
 8000442:	bf00      	nop
 8000444:	40010800 	.word	0x40010800

08000448 <HAL_LCD_GOTO_XY>:

void HAL_LCD_GOTO_XY(uint8_t line, uint8_t position)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	460a      	mov	r2, r1
 8000452:	71fb      	strb	r3, [r7, #7]
 8000454:	4613      	mov	r3, r2
 8000456:	71bb      	strb	r3, [r7, #6]
	if (line == 1)
 8000458:	79fb      	ldrb	r3, [r7, #7]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d108      	bne.n	8000470 <HAL_LCD_GOTO_XY+0x28>
	{
		if (position < 16 && position >= 0)
 800045e:	79bb      	ldrb	r3, [r7, #6]
 8000460:	2b0f      	cmp	r3, #15
 8000462:	d805      	bhi.n	8000470 <HAL_LCD_GOTO_XY+0x28>
		{
			HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW + position);
 8000464:	79bb      	ldrb	r3, [r7, #6]
 8000466:	3b80      	subs	r3, #128	; 0x80
 8000468:	b2db      	uxtb	r3, r3
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f82a 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
		}
	}
	if (line == 2)
 8000470:	79fb      	ldrb	r3, [r7, #7]
 8000472:	2b02      	cmp	r3, #2
 8000474:	d108      	bne.n	8000488 <HAL_LCD_GOTO_XY+0x40>
	{
		if (position < 16 && position >= 0)
 8000476:	79bb      	ldrb	r3, [r7, #6]
 8000478:	2b0f      	cmp	r3, #15
 800047a:	d805      	bhi.n	8000488 <HAL_LCD_GOTO_XY+0x40>
		{
			HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_SECOND_ROW + position);
 800047c:	79bb      	ldrb	r3, [r7, #6]
 800047e:	3b40      	subs	r3, #64	; 0x40
 8000480:	b2db      	uxtb	r3, r3
 8000482:	4618      	mov	r0, r3
 8000484:	f000 f81e 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
		}
	}
}
 8000488:	bf00      	nop
 800048a:	3708      	adds	r7, #8
 800048c:	46bd      	mov	sp, r7
 800048e:	bd80      	pop	{r7, pc}

08000490 <HAL_LCD_INIT>:

void HAL_LCD_INIT(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000494:	2014      	movs	r0, #20
 8000496:	f7ff feef 	bl	8000278 <delay_ms>
	LCD_GPIO_INIT();
 800049a:	f7ff ff0b 	bl	80002b4 <LCD_GPIO_INIT>
	delay_ms(15);
 800049e:	200f      	movs	r0, #15
 80004a0:	f7ff feea 	bl	8000278 <delay_ms>

	HAL_LCD_CLEAR_SCREEN();
 80004a4:	f7ff ffb2 	bl	800040c <HAL_LCD_CLEAR_SCREEN>

#ifdef EIGHT_BIT_MODE
	HAL_LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_8BIT_2LINES);
 80004a8:	2038      	movs	r0, #56	; 0x38
 80004aa:	f000 f80b 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02); // As data sheet
	LCD_WRITE_COMMAND(LCD_CMD_FUNCTION_4BIT_2LINES);
#endif

	HAL_LCD_WRITE_COMMAND(LCD_CMD_ENTRY_MODE);
 80004ae:	2006      	movs	r0, #6
 80004b0:	f000 f808 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_BEGIN_AT_FIRST_ROW);
 80004b4:	2080      	movs	r0, #128	; 0x80
 80004b6:	f000 f805 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
	HAL_LCD_WRITE_COMMAND(LCD_CMD_DISP_ON_CURSOR_BLINK);
 80004ba:	200f      	movs	r0, #15
 80004bc:	f000 f802 	bl	80004c4 <HAL_LCD_WRITE_COMMAND>
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <HAL_LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
}

// Function to write commands for LCD
void HAL_LCD_WRITE_COMMAND(uint8_t command)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
#ifdef EIGHT_BIT_MODE
/* ====== LCD is in 8 bit Mode ====== */

	// Set LCD Port using command variable
	MCAL_GPIO_WritePort(LCD_CTRL, command);
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	b29b      	uxth	r3, r3
 80004d2:	4619      	mov	r1, r3
 80004d4:	480b      	ldr	r0, [pc, #44]	; (8000504 <HAL_LCD_WRITE_COMMAND+0x40>)
 80004d6:	f000 fc8b 	bl	8000df0 <MCAL_GPIO_WritePort>

	// Port Direction is set to Output in LCD_init()

	// Turn RS off for command mode
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e0:	4808      	ldr	r0, [pc, #32]	; (8000504 <HAL_LCD_WRITE_COMMAND+0x40>)
 80004e2:	f000 fc6e 	bl	8000dc2 <MCAL_GPIO_WritePin>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ec:	4805      	ldr	r0, [pc, #20]	; (8000504 <HAL_LCD_WRITE_COMMAND+0x40>)
 80004ee:	f000 fc68 	bl	8000dc2 <MCAL_GPIO_WritePin>

	delay_ms(1);
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff fec0 	bl	8000278 <delay_ms>
	HAL_LCD_KICK();
 80004f8:	f7ff ff90 	bl	800041c <HAL_LCD_KICK>
	temp_cmd = (command << 4);
	MCAL_GPIO_WritePort(LCD_CTRL, temp_cmd);
	HAL_LCD_KICK();
#endif

}
 80004fc:	bf00      	nop
 80004fe:	3708      	adds	r7, #8
 8000500:	46bd      	mov	sp, r7
 8000502:	bd80      	pop	{r7, pc}
 8000504:	40010800 	.word	0x40010800

08000508 <HAL_LCD_WRITE_CHAR>:

void HAL_LCD_WRITE_CHAR(uint8_t character)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	/* ====== LCD is in 8 bit Mode ====== */
	// Turn RS on for data mode
	//MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);

	// Set LCD Port using character variable
	MCAL_GPIO_WritePort(LCD_CTRL, character);
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	b29b      	uxth	r3, r3
 8000516:	4619      	mov	r1, r3
 8000518:	480b      	ldr	r0, [pc, #44]	; (8000548 <HAL_LCD_WRITE_CHAR+0x40>)
 800051a:	f000 fc69 	bl	8000df0 <MCAL_GPIO_WritePort>

	// Turn RW off so you can write
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800051e:	2200      	movs	r2, #0
 8000520:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <HAL_LCD_WRITE_CHAR+0x40>)
 8000526:	f000 fc4c 	bl	8000dc2 <MCAL_GPIO_WritePin>

	// Turn RS on for data mode
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 800052a:	2201      	movs	r2, #1
 800052c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000530:	4805      	ldr	r0, [pc, #20]	; (8000548 <HAL_LCD_WRITE_CHAR+0x40>)
 8000532:	f000 fc46 	bl	8000dc2 <MCAL_GPIO_WritePin>


	delay_ms(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f7ff fe9e 	bl	8000278 <delay_ms>
	HAL_LCD_KICK();
 800053c:	f7ff ff6e 	bl	800041c <HAL_LCD_KICK>
	temp_cmd = (character << 4);
	MCAL_GPIO_WritePort(LCD_CTRL, temp_cmd);
	HAL_LCD_KICK();
#endif

}
 8000540:	bf00      	nop
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	40010800 	.word	0x40010800

0800054c <HAL_LCD_WRITE_STRING>:

void HAL_LCD_WRITE_STRING(char* string)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	// Counter to avoid writing bigger word size than LCD screen
	int count = 0;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
	while (*string > 0)
 8000558:	e01c      	b.n	8000594 <HAL_LCD_WRITE_STRING+0x48>
	{
		count++;
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	3301      	adds	r3, #1
 800055e:	60fb      	str	r3, [r7, #12]
		HAL_LCD_WRITE_CHAR(*string++);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	1c5a      	adds	r2, r3, #1
 8000564:	607a      	str	r2, [r7, #4]
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	4618      	mov	r0, r3
 800056a:	f7ff ffcd 	bl	8000508 <HAL_LCD_WRITE_CHAR>
		if (count == 16) // Counter reached the end of the first row
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b10      	cmp	r3, #16
 8000572:	d104      	bne.n	800057e <HAL_LCD_WRITE_STRING+0x32>
		{
			HAL_LCD_GOTO_XY(2, 0); // Line : row num 2 , starts from position 0
 8000574:	2100      	movs	r1, #0
 8000576:	2002      	movs	r0, #2
 8000578:	f7ff ff66 	bl	8000448 <HAL_LCD_GOTO_XY>
 800057c:	e00a      	b.n	8000594 <HAL_LCD_WRITE_STRING+0x48>
		} else if (count == 32)
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	2b20      	cmp	r3, #32
 8000582:	d107      	bne.n	8000594 <HAL_LCD_WRITE_STRING+0x48>
		{
			HAL_LCD_CLEAR_SCREEN();
 8000584:	f7ff ff42 	bl	800040c <HAL_LCD_CLEAR_SCREEN>
			HAL_LCD_GOTO_XY(1, 0); // go to line 1 , position 0
 8000588:	2100      	movs	r1, #0
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff5c 	bl	8000448 <HAL_LCD_GOTO_XY>
			count = 0;
 8000590:	2300      	movs	r3, #0
 8000592:	60fb      	str	r3, [r7, #12]
	while (*string > 0)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d1de      	bne.n	800055a <HAL_LCD_WRITE_STRING+0xe>
		}
	}
}
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}

080005a6 <MCAL_EXTI_GPIO_Init>:
 * @param [in] 		- EXTI_Config: set by @ref EXTI_define, EXTI_Trigger_define and EXTI_IRQ_define
 * @retval 			- None
 * Note				- None
 */
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t * EXTI_Config)
{
 80005a6:	b580      	push	{r7, lr}
 80005a8:	b082      	sub	sp, #8
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	6078      	str	r0, [r7, #4]
	Update_EXTI(EXTI_Config);
 80005ae:	6878      	ldr	r0, [r7, #4]
 80005b0:	f000 f804 	bl	80005bc <Update_EXTI>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Update_EXTI>:
{
	Update_EXTI(EXTI_Config);
}

static void Update_EXTI(EXTI_PinConfig_t* EXTI_Config)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
	 * 1) Configure GPIO To Be Alternative Function Input (Floating Input)
	 */
	GPIO_PinConfig_t PinConfig;

	/* Update the GPIO Pin to be floating input */
	PinConfig.GPIO_PinNumber = EXTI_Config->EXTI_Pin.GPIO_Pin;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	891b      	ldrh	r3, [r3, #8]
 80005c8:	813b      	strh	r3, [r7, #8]
	PinConfig.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 80005ca:	2301      	movs	r3, #1
 80005cc:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_Pin.GPIOx, &PinConfig);
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f107 0208 	add.w	r2, r7, #8
 80005d6:	4611      	mov	r1, r2
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fb73 	bl	8000cc4 <MCAL_GPIO_Init>

	/*
	 * 2) Update AFIO to Route between EXTI Line With Port A,B,C,D
	 */
	uint8_t AFIO_EXTICR_index = EXTI_Config->EXTI_Pin.EXTI_InputLineNumber / 4;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	73fb      	strb	r3, [r7, #15]
	uint8_t AFIO_EXTICR_position = (EXTI_Config->EXTI_Pin.EXTI_InputLineNumber % 4) *4;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	009b      	lsls	r3, r3, #2
 80005f6:	73bb      	strb	r3, [r7, #14]

	/* Clear the four bits first */
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~(0xF << AFIO_EXTICR_position);
 80005f8:	4a61      	ldr	r2, [pc, #388]	; (8000780 <Update_EXTI+0x1c4>)
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	3302      	adds	r3, #2
 80005fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000602:	7bbb      	ldrb	r3, [r7, #14]
 8000604:	210f      	movs	r1, #15
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	4618      	mov	r0, r3
 800060e:	495c      	ldr	r1, [pc, #368]	; (8000780 <Update_EXTI+0x1c4>)
 8000610:	7bfb      	ldrb	r3, [r7, #15]
 8000612:	4002      	ands	r2, r0
 8000614:	3302      	adds	r3, #2
 8000616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/* Set the four bits for the port */
	AFIO->EXTICR[AFIO_EXTICR_index] |= ((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_Pin.GPIOx) & 0xF) << AFIO_EXTICR_position);
 800061a:	4a59      	ldr	r2, [pc, #356]	; (8000780 <Update_EXTI+0x1c4>)
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	3302      	adds	r3, #2
 8000620:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	4956      	ldr	r1, [pc, #344]	; (8000784 <Update_EXTI+0x1c8>)
 800062a:	428b      	cmp	r3, r1
 800062c:	d016      	beq.n	800065c <Update_EXTI+0xa0>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	4955      	ldr	r1, [pc, #340]	; (8000788 <Update_EXTI+0x1cc>)
 8000634:	428b      	cmp	r3, r1
 8000636:	d00f      	beq.n	8000658 <Update_EXTI+0x9c>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	4953      	ldr	r1, [pc, #332]	; (800078c <Update_EXTI+0x1d0>)
 800063e:	428b      	cmp	r3, r1
 8000640:	d008      	beq.n	8000654 <Update_EXTI+0x98>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	685b      	ldr	r3, [r3, #4]
 8000646:	4952      	ldr	r1, [pc, #328]	; (8000790 <Update_EXTI+0x1d4>)
 8000648:	428b      	cmp	r3, r1
 800064a:	d101      	bne.n	8000650 <Update_EXTI+0x94>
 800064c:	2303      	movs	r3, #3
 800064e:	e006      	b.n	800065e <Update_EXTI+0xa2>
 8000650:	2300      	movs	r3, #0
 8000652:	e004      	b.n	800065e <Update_EXTI+0xa2>
 8000654:	2302      	movs	r3, #2
 8000656:	e002      	b.n	800065e <Update_EXTI+0xa2>
 8000658:	2301      	movs	r3, #1
 800065a:	e000      	b.n	800065e <Update_EXTI+0xa2>
 800065c:	2300      	movs	r3, #0
 800065e:	7bb9      	ldrb	r1, [r7, #14]
 8000660:	408b      	lsls	r3, r1
 8000662:	4618      	mov	r0, r3
 8000664:	4946      	ldr	r1, [pc, #280]	; (8000780 <Update_EXTI+0x1c4>)
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	4302      	orrs	r2, r0
 800066a:	3302      	adds	r3, #2
 800066c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*
	 * 3) Update Rising / Falling Edge Register
	 */

	/* Reset bits of rising */
	EXTI->RTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000670:	4b48      	ldr	r3, [pc, #288]	; (8000794 <Update_EXTI+0x1d8>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	8812      	ldrh	r2, [r2, #0]
 8000678:	4611      	mov	r1, r2
 800067a:	2201      	movs	r2, #1
 800067c:	408a      	lsls	r2, r1
 800067e:	43d2      	mvns	r2, r2
 8000680:	4611      	mov	r1, r2
 8000682:	4a44      	ldr	r2, [pc, #272]	; (8000794 <Update_EXTI+0x1d8>)
 8000684:	400b      	ands	r3, r1
 8000686:	6093      	str	r3, [r2, #8]

	/* Reset bits of falling */
	EXTI->FTSR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000688:	4b42      	ldr	r3, [pc, #264]	; (8000794 <Update_EXTI+0x1d8>)
 800068a:	68db      	ldr	r3, [r3, #12]
 800068c:	687a      	ldr	r2, [r7, #4]
 800068e:	8812      	ldrh	r2, [r2, #0]
 8000690:	4611      	mov	r1, r2
 8000692:	2201      	movs	r2, #1
 8000694:	408a      	lsls	r2, r1
 8000696:	43d2      	mvns	r2, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a3e      	ldr	r2, [pc, #248]	; (8000794 <Update_EXTI+0x1d8>)
 800069c:	400b      	ands	r3, r1
 800069e:	60d3      	str	r3, [r2, #12]

	/* Which mode ?!*/
	if(EXTI_Config->Trigger_Case == EXTI_RT)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	7b1b      	ldrb	r3, [r3, #12]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10b      	bne.n	80006c0 <Update_EXTI+0x104>
	{
		/* Set bits of rising */
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006a8:	4b3a      	ldr	r3, [pc, #232]	; (8000794 <Update_EXTI+0x1d8>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	8812      	ldrh	r2, [r2, #0]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a36      	ldr	r2, [pc, #216]	; (8000794 <Update_EXTI+0x1d8>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6093      	str	r3, [r2, #8]
 80006be:	e029      	b.n	8000714 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_FT)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	7b1b      	ldrb	r3, [r3, #12]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d10b      	bne.n	80006e0 <Update_EXTI+0x124>
	{
		/* Set bits of falling */
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006c8:	4b32      	ldr	r3, [pc, #200]	; (8000794 <Update_EXTI+0x1d8>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	4611      	mov	r1, r2
 80006d2:	2201      	movs	r2, #1
 80006d4:	408a      	lsls	r2, r1
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a2e      	ldr	r2, [pc, #184]	; (8000794 <Update_EXTI+0x1d8>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	60d3      	str	r3, [r2, #12]
 80006de:	e019      	b.n	8000714 <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_RFT)
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	7b1b      	ldrb	r3, [r3, #12]
 80006e4:	2b02      	cmp	r3, #2
 80006e6:	d115      	bne.n	8000714 <Update_EXTI+0x158>
	{
		/* Set bits of rising & falling */
		EXTI->RTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006e8:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <Update_EXTI+0x1d8>)
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	8812      	ldrh	r2, [r2, #0]
 80006f0:	4611      	mov	r1, r2
 80006f2:	2201      	movs	r2, #1
 80006f4:	408a      	lsls	r2, r1
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a26      	ldr	r2, [pc, #152]	; (8000794 <Update_EXTI+0x1d8>)
 80006fa:	430b      	orrs	r3, r1
 80006fc:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <Update_EXTI+0x1d8>)
 8000700:	68db      	ldr	r3, [r3, #12]
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	8812      	ldrh	r2, [r2, #0]
 8000706:	4611      	mov	r1, r2
 8000708:	2201      	movs	r2, #1
 800070a:	408a      	lsls	r2, r1
 800070c:	4611      	mov	r1, r2
 800070e:	4a21      	ldr	r2, [pc, #132]	; (8000794 <Update_EXTI+0x1d8>)
 8000710:	430b      	orrs	r3, r1
 8000712:	60d3      	str	r3, [r2, #12]

	/*
	 * 4) Update Interrupt Handling CallBack
	 */

	GP_IRQ_CallBack[EXTI_Config->EXTI_Pin.EXTI_InputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	881b      	ldrh	r3, [r3, #0]
 8000718:	4619      	mov	r1, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	691b      	ldr	r3, [r3, #16]
 800071e:	4a1e      	ldr	r2, [pc, #120]	; (8000798 <Update_EXTI+0x1dc>)
 8000720:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*
	 * 5) Enable/Disable IRQ EXTI & NVIC
	 */

	if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Enable)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7b5b      	ldrb	r3, [r3, #13]
 8000728:	2b01      	cmp	r3, #1
 800072a:	d110      	bne.n	800074e <Update_EXTI+0x192>
	{
		EXTI->IMR |= (1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800072c:	4b19      	ldr	r3, [pc, #100]	; (8000794 <Update_EXTI+0x1d8>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	8812      	ldrh	r2, [r2, #0]
 8000734:	4611      	mov	r1, r2
 8000736:	2201      	movs	r2, #1
 8000738:	408a      	lsls	r2, r1
 800073a:	4611      	mov	r1, r2
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <Update_EXTI+0x1d8>)
 800073e:	430b      	orrs	r3, r1
 8000740:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 f938 	bl	80009bc <Enable_NVIC>
	{
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
	}

}
 800074c:	e014      	b.n	8000778 <Update_EXTI+0x1bc>
	else if(EXTI_Config->IRQ_Enable == EXTI_IRQ_Disable)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	7b5b      	ldrb	r3, [r3, #13]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d110      	bne.n	8000778 <Update_EXTI+0x1bc>
		EXTI->IMR &= ~(1 << EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <Update_EXTI+0x1d8>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	687a      	ldr	r2, [r7, #4]
 800075c:	8812      	ldrh	r2, [r2, #0]
 800075e:	4611      	mov	r1, r2
 8000760:	2201      	movs	r2, #1
 8000762:	408a      	lsls	r2, r1
 8000764:	43d2      	mvns	r2, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <Update_EXTI+0x1d8>)
 800076a:	400b      	ands	r3, r1
 800076c:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_Pin.EXTI_InputLineNumber);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f000 f988 	bl	8000a88 <Disable_NVIC>
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40010000 	.word	0x40010000
 8000784:	40010800 	.word	0x40010800
 8000788:	40010c00 	.word	0x40010c00
 800078c:	40011000 	.word	0x40011000
 8000790:	40011400 	.word	0x40011400
 8000794:	40010400 	.word	0x40010400
 8000798:	20000024 	.word	0x20000024

0800079c <EXTI0_IRQHandler>:
/* =============== ISR Functions ================== */
/* ================================================ */

// EXTI0
void EXTI0_IRQHandler (void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 0;
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <EXTI0_IRQHandler+0x1c>)
 80007a2:	695b      	ldr	r3, [r3, #20]
 80007a4:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <EXTI0_IRQHandler+0x1c>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[0]();
 80007ac:	4b03      	ldr	r3, [pc, #12]	; (80007bc <EXTI0_IRQHandler+0x20>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4798      	blx	r3

}
 80007b2:	bf00      	nop
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	bf00      	nop
 80007b8:	40010400 	.word	0x40010400
 80007bc:	20000024 	.word	0x20000024

080007c0 <EXTI1_IRQHandler>:

// EXTI1
void EXTI1_IRQHandler (void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 1;
 80007c4:	4b05      	ldr	r3, [pc, #20]	; (80007dc <EXTI1_IRQHandler+0x1c>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	4a04      	ldr	r2, [pc, #16]	; (80007dc <EXTI1_IRQHandler+0x1c>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[1]();
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <EXTI1_IRQHandler+0x20>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	4798      	blx	r3

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40010400 	.word	0x40010400
 80007e0:	20000024 	.word	0x20000024

080007e4 <EXTI2_IRQHandler>:

// EXTI2
void EXTI2_IRQHandler (void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 2;
 80007e8:	4b05      	ldr	r3, [pc, #20]	; (8000800 <EXTI2_IRQHandler+0x1c>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a04      	ldr	r2, [pc, #16]	; (8000800 <EXTI2_IRQHandler+0x1c>)
 80007ee:	f043 0304 	orr.w	r3, r3, #4
 80007f2:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[2]();
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <EXTI2_IRQHandler+0x20>)
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	4798      	blx	r3

}
 80007fa:	bf00      	nop
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40010400 	.word	0x40010400
 8000804:	20000024 	.word	0x20000024

08000808 <EXTI3_IRQHandler>:

// EXTI3
void EXTI3_IRQHandler (void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 3;
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <EXTI3_IRQHandler+0x1c>)
 800080e:	695b      	ldr	r3, [r3, #20]
 8000810:	4a04      	ldr	r2, [pc, #16]	; (8000824 <EXTI3_IRQHandler+0x1c>)
 8000812:	f043 0308 	orr.w	r3, r3, #8
 8000816:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[3]();
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <EXTI3_IRQHandler+0x20>)
 800081a:	68db      	ldr	r3, [r3, #12]
 800081c:	4798      	blx	r3

}
 800081e:	bf00      	nop
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40010400 	.word	0x40010400
 8000828:	20000024 	.word	0x20000024

0800082c <EXTI4_IRQHandler>:

// EXTI4
void EXTI4_IRQHandler (void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
	/* Clear By Writing "1" into the bit Pending Register (EXTI_PR) */
	EXTI->PR |= 1 << 4;
 8000830:	4b05      	ldr	r3, [pc, #20]	; (8000848 <EXTI4_IRQHandler+0x1c>)
 8000832:	695b      	ldr	r3, [r3, #20]
 8000834:	4a04      	ldr	r2, [pc, #16]	; (8000848 <EXTI4_IRQHandler+0x1c>)
 8000836:	f043 0310 	orr.w	r3, r3, #16
 800083a:	6153      	str	r3, [r2, #20]

	/* Call IRQ_CallBack */
	GP_IRQ_CallBack[4]();
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <EXTI4_IRQHandler+0x20>)
 800083e:	691b      	ldr	r3, [r3, #16]
 8000840:	4798      	blx	r3

}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40010400 	.word	0x40010400
 800084c:	20000024 	.word	0x20000024

08000850 <EXTI9_5_IRQHandler>:

// EXTI5 ---> EXTI9
void EXTI9_5_IRQHandler (void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<5)	{EXTI->PR |= (1<<5); GP_IRQ_CallBack[5]();}
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	f003 0320 	and.w	r3, r3, #32
 800085c:	2b00      	cmp	r3, #0
 800085e:	d008      	beq.n	8000872 <EXTI9_5_IRQHandler+0x22>
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000862:	695b      	ldr	r3, [r3, #20]
 8000864:	4a22      	ldr	r2, [pc, #136]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000866:	f043 0320 	orr.w	r3, r3, #32
 800086a:	6153      	str	r3, [r2, #20]
 800086c:	4b21      	ldr	r3, [pc, #132]	; (80008f4 <EXTI9_5_IRQHandler+0xa4>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	4798      	blx	r3
	if (EXTI->PR & 1<<6)	{EXTI->PR |= (1<<6); GP_IRQ_CallBack[6]();}
 8000872:	4b1f      	ldr	r3, [pc, #124]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087a:	2b00      	cmp	r3, #0
 800087c:	d008      	beq.n	8000890 <EXTI9_5_IRQHandler+0x40>
 800087e:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000884:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <EXTI9_5_IRQHandler+0xa4>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4798      	blx	r3
	if (EXTI->PR & 1<<7)	{EXTI->PR |= (1<<7); GP_IRQ_CallBack[7]();}
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 8000892:	695b      	ldr	r3, [r3, #20]
 8000894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000898:	2b00      	cmp	r3, #0
 800089a:	d008      	beq.n	80008ae <EXTI9_5_IRQHandler+0x5e>
 800089c:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 800089e:	695b      	ldr	r3, [r3, #20]
 80008a0:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a6:	6153      	str	r3, [r2, #20]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <EXTI9_5_IRQHandler+0xa4>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4798      	blx	r3
	if (EXTI->PR & 1<<8)	{EXTI->PR |= (1<<8); GP_IRQ_CallBack[8]();}
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008b0:	695b      	ldr	r3, [r3, #20]
 80008b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d008      	beq.n	80008cc <EXTI9_5_IRQHandler+0x7c>
 80008ba:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a0c      	ldr	r2, [pc, #48]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c4:	6153      	str	r3, [r2, #20]
 80008c6:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <EXTI9_5_IRQHandler+0xa4>)
 80008c8:	6a1b      	ldr	r3, [r3, #32]
 80008ca:	4798      	blx	r3
	if (EXTI->PR & 1<<9)	{EXTI->PR |= (1<<9); GP_IRQ_CallBack[9]();}
 80008cc:	4b08      	ldr	r3, [pc, #32]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008ce:	695b      	ldr	r3, [r3, #20]
 80008d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d008      	beq.n	80008ea <EXTI9_5_IRQHandler+0x9a>
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008da:	695b      	ldr	r3, [r3, #20]
 80008dc:	4a04      	ldr	r2, [pc, #16]	; (80008f0 <EXTI9_5_IRQHandler+0xa0>)
 80008de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e2:	6153      	str	r3, [r2, #20]
 80008e4:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <EXTI9_5_IRQHandler+0xa4>)
 80008e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008e8:	4798      	blx	r3
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	40010400 	.word	0x40010400
 80008f4:	20000024 	.word	0x20000024

080008f8 <EXTI15_10_IRQHandler>:

// EXTI10 ---> EXTI15
void EXTI15_10_IRQHandler (void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
	if (EXTI->PR & 1<<10)	{EXTI->PR |= (1<<10); GP_IRQ_CallBack[10]();}
 80008fc:	4b2d      	ldr	r3, [pc, #180]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 80008fe:	695b      	ldr	r3, [r3, #20]
 8000900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000904:	2b00      	cmp	r3, #0
 8000906:	d008      	beq.n	800091a <EXTI15_10_IRQHandler+0x22>
 8000908:	4b2a      	ldr	r3, [pc, #168]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800090a:	695b      	ldr	r3, [r3, #20]
 800090c:	4a29      	ldr	r2, [pc, #164]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800090e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000912:	6153      	str	r3, [r2, #20]
 8000914:	4b28      	ldr	r3, [pc, #160]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	4798      	blx	r3
	if (EXTI->PR & 1<<11)	{EXTI->PR |= (1<<11); GP_IRQ_CallBack[11]();}
 800091a:	4b26      	ldr	r3, [pc, #152]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800091c:	695b      	ldr	r3, [r3, #20]
 800091e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000922:	2b00      	cmp	r3, #0
 8000924:	d008      	beq.n	8000938 <EXTI15_10_IRQHandler+0x40>
 8000926:	4b23      	ldr	r3, [pc, #140]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000928:	695b      	ldr	r3, [r3, #20]
 800092a:	4a22      	ldr	r2, [pc, #136]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800092c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000930:	6153      	str	r3, [r2, #20]
 8000932:	4b21      	ldr	r3, [pc, #132]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 8000934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000936:	4798      	blx	r3
	if (EXTI->PR & 1<<12)	{EXTI->PR |= (1<<12); GP_IRQ_CallBack[12]();}
 8000938:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800093a:	695b      	ldr	r3, [r3, #20]
 800093c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d008      	beq.n	8000956 <EXTI15_10_IRQHandler+0x5e>
 8000944:	4b1b      	ldr	r3, [pc, #108]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000946:	695b      	ldr	r3, [r3, #20]
 8000948:	4a1a      	ldr	r2, [pc, #104]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 800094a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800094e:	6153      	str	r3, [r2, #20]
 8000950:	4b19      	ldr	r3, [pc, #100]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 8000952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000954:	4798      	blx	r3
	if (EXTI->PR & 1<<13)	{EXTI->PR |= (1<<13); GP_IRQ_CallBack[13]();}
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800095e:	2b00      	cmp	r3, #0
 8000960:	d008      	beq.n	8000974 <EXTI15_10_IRQHandler+0x7c>
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000964:	695b      	ldr	r3, [r3, #20]
 8000966:	4a13      	ldr	r2, [pc, #76]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000968:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800096c:	6153      	str	r3, [r2, #20]
 800096e:	4b12      	ldr	r3, [pc, #72]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 8000970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000972:	4798      	blx	r3
	if (EXTI->PR & 1<<14)	{EXTI->PR |= (1<<14); GP_IRQ_CallBack[14]();}
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000976:	695b      	ldr	r3, [r3, #20]
 8000978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097c:	2b00      	cmp	r3, #0
 800097e:	d008      	beq.n	8000992 <EXTI15_10_IRQHandler+0x9a>
 8000980:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000982:	695b      	ldr	r3, [r3, #20]
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000986:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800098a:	6153      	str	r3, [r2, #20]
 800098c:	4b0a      	ldr	r3, [pc, #40]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 800098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000990:	4798      	blx	r3
	if (EXTI->PR & 1<<15)	{EXTI->PR |= (1<<15); GP_IRQ_CallBack[15]();}
 8000992:	4b08      	ldr	r3, [pc, #32]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 8000994:	695b      	ldr	r3, [r3, #20]
 8000996:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800099a:	2b00      	cmp	r3, #0
 800099c:	d008      	beq.n	80009b0 <EXTI15_10_IRQHandler+0xb8>
 800099e:	4b05      	ldr	r3, [pc, #20]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <EXTI15_10_IRQHandler+0xbc>)
 80009a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009a8:	6153      	str	r3, [r2, #20]
 80009aa:	4b03      	ldr	r3, [pc, #12]	; (80009b8 <EXTI15_10_IRQHandler+0xc0>)
 80009ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80009ae:	4798      	blx	r3
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40010400 	.word	0x40010400
 80009b8:	20000024 	.word	0x20000024

080009bc <Enable_NVIC>:

static void Enable_NVIC (uint16_t IRQ)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b0f      	cmp	r3, #15
 80009ca:	d854      	bhi.n	8000a76 <Enable_NVIC+0xba>
 80009cc:	a201      	add	r2, pc, #4	; (adr r2, 80009d4 <Enable_NVIC+0x18>)
 80009ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009d2:	bf00      	nop
 80009d4:	08000a15 	.word	0x08000a15
 80009d8:	08000a23 	.word	0x08000a23
 80009dc:	08000a31 	.word	0x08000a31
 80009e0:	08000a3f 	.word	0x08000a3f
 80009e4:	08000a4d 	.word	0x08000a4d
 80009e8:	08000a5b 	.word	0x08000a5b
 80009ec:	08000a5b 	.word	0x08000a5b
 80009f0:	08000a5b 	.word	0x08000a5b
 80009f4:	08000a5b 	.word	0x08000a5b
 80009f8:	08000a5b 	.word	0x08000a5b
 80009fc:	08000a69 	.word	0x08000a69
 8000a00:	08000a69 	.word	0x08000a69
 8000a04:	08000a69 	.word	0x08000a69
 8000a08:	08000a69 	.word	0x08000a69
 8000a0c:	08000a69 	.word	0x08000a69
 8000a10:	08000a69 	.word	0x08000a69
	{
		case 0: NVIC_IRQ6_EXTI0_EN(); break;
 8000a14:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a19      	ldr	r2, [pc, #100]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a1e:	6013      	str	r3, [r2, #0]
 8000a20:	e029      	b.n	8000a76 <Enable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_EN(); break;
 8000a22:	4b17      	ldr	r3, [pc, #92]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a16      	ldr	r2, [pc, #88]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	6013      	str	r3, [r2, #0]
 8000a2e:	e022      	b.n	8000a76 <Enable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_EN(); break;
 8000a30:	4b13      	ldr	r3, [pc, #76]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6013      	str	r3, [r2, #0]
 8000a3c:	e01b      	b.n	8000a76 <Enable_NVIC+0xba>
		case 3:	NVIC_IRQ9_EXTI3_EN(); break;
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a48:	6013      	str	r3, [r2, #0]
 8000a4a:	e014      	b.n	8000a76 <Enable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_EN(); break;
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a0b      	ldr	r2, [pc, #44]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a52:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a56:	6013      	str	r3, [r2, #0]
 8000a58:	e00d      	b.n	8000a76 <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: NVIC_IRQ23_EXTI5_9_EN(); break;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <Enable_NVIC+0xc4>)
 8000a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a64:	6013      	str	r3, [r2, #0]
 8000a66:	e006      	b.n	8000a76 <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI10_15_EN(); break;
 8000a68:	4b06      	ldr	r3, [pc, #24]	; (8000a84 <Enable_NVIC+0xc8>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a05      	ldr	r2, [pc, #20]	; (8000a84 <Enable_NVIC+0xc8>)
 8000a6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a72:	6013      	str	r3, [r2, #0]
 8000a74:	bf00      	nop
	}
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100
 8000a84:	e000e104 	.word	0xe000e104

08000a88 <Disable_NVIC>:

static void Disable_NVIC (uint16_t IRQ)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000a92:	88fb      	ldrh	r3, [r7, #6]
 8000a94:	2b0f      	cmp	r3, #15
 8000a96:	d854      	bhi.n	8000b42 <Disable_NVIC+0xba>
 8000a98:	a201      	add	r2, pc, #4	; (adr r2, 8000aa0 <Disable_NVIC+0x18>)
 8000a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a9e:	bf00      	nop
 8000aa0:	08000ae1 	.word	0x08000ae1
 8000aa4:	08000aef 	.word	0x08000aef
 8000aa8:	08000afd 	.word	0x08000afd
 8000aac:	08000b0b 	.word	0x08000b0b
 8000ab0:	08000b19 	.word	0x08000b19
 8000ab4:	08000b27 	.word	0x08000b27
 8000ab8:	08000b27 	.word	0x08000b27
 8000abc:	08000b27 	.word	0x08000b27
 8000ac0:	08000b27 	.word	0x08000b27
 8000ac4:	08000b27 	.word	0x08000b27
 8000ac8:	08000b35 	.word	0x08000b35
 8000acc:	08000b35 	.word	0x08000b35
 8000ad0:	08000b35 	.word	0x08000b35
 8000ad4:	08000b35 	.word	0x08000b35
 8000ad8:	08000b35 	.word	0x08000b35
 8000adc:	08000b35 	.word	0x08000b35
	{
		case 0: NVIC_IRQ6_EXTI0_DI(); break;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <Disable_NVIC+0xc4>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a19      	ldr	r2, [pc, #100]	; (8000b4c <Disable_NVIC+0xc4>)
 8000ae6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	e029      	b.n	8000b42 <Disable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_DI(); break;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <Disable_NVIC+0xc4>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a16      	ldr	r2, [pc, #88]	; (8000b4c <Disable_NVIC+0xc4>)
 8000af4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000af8:	6013      	str	r3, [r2, #0]
 8000afa:	e022      	b.n	8000b42 <Disable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_DI(); break;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <Disable_NVIC+0xc4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
 8000b08:	e01b      	b.n	8000b42 <Disable_NVIC+0xba>
		case 3:	NVIC_IRQ9_EXTI3_DI(); break;
 8000b0a:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a0f      	ldr	r2, [pc, #60]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b14:	6013      	str	r3, [r2, #0]
 8000b16:	e014      	b.n	8000b42 <Disable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_DI(); break;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0b      	ldr	r2, [pc, #44]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e00d      	b.n	8000b42 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9: NVIC_IRQ23_EXTI5_9_DI(); break;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a08      	ldr	r2, [pc, #32]	; (8000b4c <Disable_NVIC+0xc4>)
 8000b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	e006      	b.n	8000b42 <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15: NVIC_IRQ40_EXTI10_15_DI(); break;
 8000b34:	4b06      	ldr	r3, [pc, #24]	; (8000b50 <Disable_NVIC+0xc8>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a05      	ldr	r2, [pc, #20]	; (8000b50 <Disable_NVIC+0xc8>)
 8000b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	bf00      	nop
	}
}
 8000b42:	bf00      	nop
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000e180 	.word	0xe000e180
 8000b50:	e000e184 	.word	0xe000e184

08000b54 <Get_CRLH_Position>:
 */

#include <stm32f103x6_GPIO_driver.h>

static uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	80fb      	strh	r3, [r7, #6]
	switch (PinNumber)
 8000b5e:	88fb      	ldrh	r3, [r7, #6]
 8000b60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b64:	f000 80a5 	beq.w	8000cb2 <Get_CRLH_Position+0x15e>
 8000b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000b6c:	f300 80a3 	bgt.w	8000cb6 <Get_CRLH_Position+0x162>
 8000b70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b74:	f000 809b 	beq.w	8000cae <Get_CRLH_Position+0x15a>
 8000b78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000b7c:	f300 809b 	bgt.w	8000cb6 <Get_CRLH_Position+0x162>
 8000b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b84:	f000 8091 	beq.w	8000caa <Get_CRLH_Position+0x156>
 8000b88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b8c:	f300 8093 	bgt.w	8000cb6 <Get_CRLH_Position+0x162>
 8000b90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b94:	f000 8087 	beq.w	8000ca6 <Get_CRLH_Position+0x152>
 8000b98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000b9c:	f300 808b 	bgt.w	8000cb6 <Get_CRLH_Position+0x162>
 8000ba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000ba4:	d07d      	beq.n	8000ca2 <Get_CRLH_Position+0x14e>
 8000ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000baa:	f300 8084 	bgt.w	8000cb6 <Get_CRLH_Position+0x162>
 8000bae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb2:	d074      	beq.n	8000c9e <Get_CRLH_Position+0x14a>
 8000bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bb8:	dc7d      	bgt.n	8000cb6 <Get_CRLH_Position+0x162>
 8000bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bbe:	d06c      	beq.n	8000c9a <Get_CRLH_Position+0x146>
 8000bc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000bc4:	dc77      	bgt.n	8000cb6 <Get_CRLH_Position+0x162>
 8000bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bca:	d064      	beq.n	8000c96 <Get_CRLH_Position+0x142>
 8000bcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bd0:	dc71      	bgt.n	8000cb6 <Get_CRLH_Position+0x162>
 8000bd2:	2b80      	cmp	r3, #128	; 0x80
 8000bd4:	d05d      	beq.n	8000c92 <Get_CRLH_Position+0x13e>
 8000bd6:	2b80      	cmp	r3, #128	; 0x80
 8000bd8:	dc6d      	bgt.n	8000cb6 <Get_CRLH_Position+0x162>
 8000bda:	2b20      	cmp	r3, #32
 8000bdc:	dc48      	bgt.n	8000c70 <Get_CRLH_Position+0x11c>
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	dd69      	ble.n	8000cb6 <Get_CRLH_Position+0x162>
 8000be2:	3b01      	subs	r3, #1
 8000be4:	2b1f      	cmp	r3, #31
 8000be6:	d866      	bhi.n	8000cb6 <Get_CRLH_Position+0x162>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <Get_CRLH_Position+0x9c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c77 	.word	0x08000c77
 8000bf4:	08000c7b 	.word	0x08000c7b
 8000bf8:	08000cb7 	.word	0x08000cb7
 8000bfc:	08000c7f 	.word	0x08000c7f
 8000c00:	08000cb7 	.word	0x08000cb7
 8000c04:	08000cb7 	.word	0x08000cb7
 8000c08:	08000cb7 	.word	0x08000cb7
 8000c0c:	08000c83 	.word	0x08000c83
 8000c10:	08000cb7 	.word	0x08000cb7
 8000c14:	08000cb7 	.word	0x08000cb7
 8000c18:	08000cb7 	.word	0x08000cb7
 8000c1c:	08000cb7 	.word	0x08000cb7
 8000c20:	08000cb7 	.word	0x08000cb7
 8000c24:	08000cb7 	.word	0x08000cb7
 8000c28:	08000cb7 	.word	0x08000cb7
 8000c2c:	08000c87 	.word	0x08000c87
 8000c30:	08000cb7 	.word	0x08000cb7
 8000c34:	08000cb7 	.word	0x08000cb7
 8000c38:	08000cb7 	.word	0x08000cb7
 8000c3c:	08000cb7 	.word	0x08000cb7
 8000c40:	08000cb7 	.word	0x08000cb7
 8000c44:	08000cb7 	.word	0x08000cb7
 8000c48:	08000cb7 	.word	0x08000cb7
 8000c4c:	08000cb7 	.word	0x08000cb7
 8000c50:	08000cb7 	.word	0x08000cb7
 8000c54:	08000cb7 	.word	0x08000cb7
 8000c58:	08000cb7 	.word	0x08000cb7
 8000c5c:	08000cb7 	.word	0x08000cb7
 8000c60:	08000cb7 	.word	0x08000cb7
 8000c64:	08000cb7 	.word	0x08000cb7
 8000c68:	08000cb7 	.word	0x08000cb7
 8000c6c:	08000c8b 	.word	0x08000c8b
 8000c70:	2b40      	cmp	r3, #64	; 0x40
 8000c72:	d00c      	beq.n	8000c8e <Get_CRLH_Position+0x13a>
	case GPIO_PIN_15:
		return 28;
		break;

	default:
		break;
 8000c74:	e01f      	b.n	8000cb6 <Get_CRLH_Position+0x162>
		return 0;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e01f      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 4;
 8000c7a:	2304      	movs	r3, #4
 8000c7c:	e01d      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 8;
 8000c7e:	2308      	movs	r3, #8
 8000c80:	e01b      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 12;
 8000c82:	230c      	movs	r3, #12
 8000c84:	e019      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 16;
 8000c86:	2310      	movs	r3, #16
 8000c88:	e017      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 20;
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	e015      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 24;
 8000c8e:	2318      	movs	r3, #24
 8000c90:	e013      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 28;
 8000c92:	231c      	movs	r3, #28
 8000c94:	e011      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e00f      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 4;
 8000c9a:	2304      	movs	r3, #4
 8000c9c:	e00d      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 8;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	e00b      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 12;
 8000ca2:	230c      	movs	r3, #12
 8000ca4:	e009      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 16;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	e007      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 20;
 8000caa:	2314      	movs	r3, #20
 8000cac:	e005      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 24;
 8000cae:	2318      	movs	r3, #24
 8000cb0:	e003      	b.n	8000cba <Get_CRLH_Position+0x166>
		return 28;
 8000cb2:	231c      	movs	r3, #28
 8000cb4:	e001      	b.n	8000cba <Get_CRLH_Position+0x166>
		break;
 8000cb6:	bf00      	nop
	}
	return 0;
 8000cb8:	2300      	movs	r3, #0
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	370c      	adds	r7, #12
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bc80      	pop	{r7}
 8000cc2:	4770      	bx	lr

08000cc4 <MCAL_GPIO_Init>:
 * @retval 			- None
 * Note				- Stm32F103C6 MCU has GPIO A, B, C, D, E Modules
 * 					  But LQFP48 Package has only GPIO A, B, PART of C/D exported as external PINs from the Module
 */
void MCAL_GPIO_Init (GPIO_TypeDef *GPIOx, GPIO_PinConfig_t *PinConfig)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b085      	sub	sp, #20
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL)  0 >>> 7
	//Port configuration register high (GPIOx_CRH) 8 >>> 15
	vuint32_t *config_reg = NULL; // To store which register for the input pin number
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60bb      	str	r3, [r7, #8]

	uint8_t PIN_CONFIG = 0 ; // To store the pin configuration
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]

	// Check if the input GPIO is bigger than bit number 8 to return the correct register for it
	config_reg = (PinConfig->GPIO_PinNumber < GPIO_PIN_8) ? &GPIOx->CRL : &GPIOx->CRH; // Return the register (Low or High)
 8000cd6:	683b      	ldr	r3, [r7, #0]
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	2bff      	cmp	r3, #255	; 0xff
 8000cdc:	d801      	bhi.n	8000ce2 <MCAL_GPIO_Init+0x1e>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	e001      	b.n	8000ce6 <MCAL_GPIO_Init+0x22>
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	60bb      	str	r3, [r7, #8]

	// Clear CNF8[1:0] MODE8[1:0]
	(*config_reg) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	881b      	ldrh	r3, [r3, #0]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff31 	bl	8000b54 <Get_CRLH_Position>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	230f      	movs	r3, #15
 8000cf8:	4093      	lsls	r3, r2
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	401a      	ands	r2, r3
 8000d02:	68bb      	ldr	r3, [r7, #8]
 8000d04:	601a      	str	r2, [r3, #0]

	// If pin is output
	if((PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP))
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	2b07      	cmp	r3, #7
 8000d0c:	d00b      	beq.n	8000d26 <MCAL_GPIO_Init+0x62>
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	789b      	ldrb	r3, [r3, #2]
 8000d12:	2b06      	cmp	r3, #6
 8000d14:	d007      	beq.n	8000d26 <MCAL_GPIO_Init+0x62>
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	789b      	ldrb	r3, [r3, #2]
 8000d1a:	2b05      	cmp	r3, #5
 8000d1c:	d003      	beq.n	8000d26 <MCAL_GPIO_Init+0x62>
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	789b      	ldrb	r3, [r3, #2]
 8000d22:	2b04      	cmp	r3, #4
 8000d24:	d10e      	bne.n	8000d44 <MCAL_GPIO_Init+0x80>
	{
		// Set CNF8[1:0] MODE8[1:0]
		PIN_CONFIG = ((((PinConfig->GPIO_MODE - 4) << 2)|(PinConfig->GPIO_OUTPUT_SPEED)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	789b      	ldrb	r3, [r3, #2]
 8000d2a:	3b04      	subs	r3, #4
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	b25a      	sxtb	r2, r3
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	78db      	ldrb	r3, [r3, #3]
 8000d34:	b25b      	sxtb	r3, r3
 8000d36:	4313      	orrs	r3, r2
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	f003 030f 	and.w	r3, r3, #15
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e02c      	b.n	8000d9e <MCAL_GPIO_Init+0xda>

	}
	// If pin is input
	else //00: Input mode (reset state)
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_ANALOG)||(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO))
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	789b      	ldrb	r3, [r3, #2]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d003      	beq.n	8000d54 <MCAL_GPIO_Init+0x90>
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	789b      	ldrb	r3, [r3, #2]
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d107      	bne.n	8000d64 <MCAL_GPIO_Init+0xa0>
		{
			// Set CNF8[1:0] MODE8[1:0] 00
			PIN_CONFIG = ((((PinConfig->GPIO_MODE) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	789b      	ldrb	r3, [r3, #2]
 8000d58:	009b      	lsls	r3, r3, #2
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	f003 030f 	and.w	r3, r3, #15
 8000d60:	73fb      	strb	r3, [r7, #15]
 8000d62:	e01c      	b.n	8000d9e <MCAL_GPIO_Init+0xda>
		}
		else if (PinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // Considered that GPIO_MODE_AF_INPUT = GPIO_MODE_INPUT_FLO in data sheet
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	789b      	ldrb	r3, [r3, #2]
 8000d68:	2b08      	cmp	r3, #8
 8000d6a:	d102      	bne.n	8000d72 <MCAL_GPIO_Init+0xae>
		{
			PIN_CONFIG = ((((GPIO_MODE_INPUT_FLO) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000d6c:	2304      	movs	r3, #4
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e015      	b.n	8000d9e <MCAL_GPIO_Init+0xda>
		}
		else // Pull-up / Pull-Down Input
		{
			// GPIO_MODE_INPUT_PU == 0b10 as Table 20. Port bit configuration table
			PIN_CONFIG = ((((GPIO_MODE_INPUT_PU) << 2)|(0x0)) & 0x0F); // "-4" > for definition on .h file  and "& 0x0F" > for neglect all remaining bits
 8000d72:	2308      	movs	r3, #8
 8000d74:	73fb      	strb	r3, [r7, #15]

			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	789b      	ldrb	r3, [r3, #2]
 8000d7a:	2b02      	cmp	r3, #2
 8000d7c:	d107      	bne.n	8000d8e <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 Input pull-up: Table 20. Port bit configuration table
				GPIOx->ODR |= PinConfig->GPIO_PinNumber;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	683a      	ldr	r2, [r7, #0]
 8000d84:	8812      	ldrh	r2, [r2, #0]
 8000d86:	431a      	orrs	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	e007      	b.n	8000d9e <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 Input pull-down: Table 20. Port bit configuration table
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	683a      	ldr	r2, [r7, #0]
 8000d94:	8812      	ldrh	r2, [r2, #0]
 8000d96:	43d2      	mvns	r2, r2
 8000d98:	401a      	ands	r2, r3
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// Write on CRL or CRH
	(*config_reg) |= (PIN_CONFIG << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000d9e:	7bfc      	ldrb	r4, [r7, #15]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff fed5 	bl	8000b54 <Get_CRLH_Position>
 8000daa:	4603      	mov	r3, r0
 8000dac:	fa04 f203 	lsl.w	r2, r4, r3
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	431a      	orrs	r2, r3
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	601a      	str	r2, [r3, #0]
}
 8000dba:	bf00      	nop
 8000dbc:	3714      	adds	r7, #20
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd90      	pop	{r4, r7, pc}

08000dc2 <MCAL_GPIO_WritePin>:
 * @param [in] 		- Value: Pin value
 * @retval 			- None
 * Note				- None
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t PinNumber, uint8_t Value)
{
 8000dc2:	b480      	push	{r7}
 8000dc4:	b083      	sub	sp, #12
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	460b      	mov	r3, r1
 8000dcc:	807b      	strh	r3, [r7, #2]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	707b      	strb	r3, [r7, #1]
	if (Value != GPIO_PIN_RESET)
 8000dd2:	787b      	ldrb	r3, [r7, #1]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d003      	beq.n	8000de0 <MCAL_GPIO_WritePin+0x1e>
	{
		//GPIOx->ODR |= PinNumber;
		//OR by using BSRR register
		GPIOx->BSRR = (uint32_t)PinNumber;
 8000dd8:	887a      	ldrh	r2, [r7, #2]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	611a      	str	r2, [r3, #16]
	}
	else
	{
		GPIOx->BRR = (uint32_t)PinNumber;
	}
}
 8000dde:	e002      	b.n	8000de6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t)PinNumber;
 8000de0:	887a      	ldrh	r2, [r7, #2]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	615a      	str	r2, [r3, #20]
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bc80      	pop	{r7}
 8000dee:	4770      	bx	lr

08000df0 <MCAL_GPIO_WritePort>:
 * @param [in] 		- Value: Port value
 * @retval 			- None
 * Note				- None
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef *GPIOx, uint16_t Value)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	460b      	mov	r3, r1
 8000dfa:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint32_t)Value;
 8000dfc:	887a      	ldrh	r2, [r7, #2]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr

08000e0c <main>:

#include "04_EXTI_Test_1_LCD_Push_Button.h"

/* =========== Main Program ========== */
int main(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
	EXTI_Test_1_LCD_Push_Button();
 8000e10:	f7ff f9ae 	bl	8000170 <EXTI_Test_1_LCD_Push_Button>
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
	...

08000e1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e1c:	480d      	ldr	r0, [pc, #52]	; (8000e54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e24:	480c      	ldr	r0, [pc, #48]	; (8000e58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e26:	490d      	ldr	r1, [pc, #52]	; (8000e5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e28:	4a0d      	ldr	r2, [pc, #52]	; (8000e60 <LoopForever+0xe>)
  movs r3, #0
 8000e2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e2c:	e002      	b.n	8000e34 <LoopCopyDataInit>

08000e2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e32:	3304      	adds	r3, #4

08000e34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e38:	d3f9      	bcc.n	8000e2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e3a:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e3c:	4c0a      	ldr	r4, [pc, #40]	; (8000e68 <LoopForever+0x16>)
  movs r3, #0
 8000e3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e40:	e001      	b.n	8000e46 <LoopFillZerobss>

08000e42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e44:	3204      	adds	r2, #4

08000e46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e48:	d3fb      	bcc.n	8000e42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000e4a:	f000 f811 	bl	8000e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4e:	f7ff ffdd 	bl	8000e0c <main>

08000e52 <LoopForever>:

LoopForever:
    b LoopForever
 8000e52:	e7fe      	b.n	8000e52 <LoopForever>
  ldr   r0, =_estack
 8000e54:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e5c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000e60:	08000f20 	.word	0x08000f20
  ldr r2, =_sbss
 8000e64:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000e68:	20000060 	.word	0x20000060

08000e6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e6c:	e7fe      	b.n	8000e6c <ADC1_2_IRQHandler>
	...

08000e70 <__libc_init_array>:
 8000e70:	b570      	push	{r4, r5, r6, lr}
 8000e72:	2600      	movs	r6, #0
 8000e74:	4d0c      	ldr	r5, [pc, #48]	; (8000ea8 <__libc_init_array+0x38>)
 8000e76:	4c0d      	ldr	r4, [pc, #52]	; (8000eac <__libc_init_array+0x3c>)
 8000e78:	1b64      	subs	r4, r4, r5
 8000e7a:	10a4      	asrs	r4, r4, #2
 8000e7c:	42a6      	cmp	r6, r4
 8000e7e:	d109      	bne.n	8000e94 <__libc_init_array+0x24>
 8000e80:	f000 f81a 	bl	8000eb8 <_init>
 8000e84:	2600      	movs	r6, #0
 8000e86:	4d0a      	ldr	r5, [pc, #40]	; (8000eb0 <__libc_init_array+0x40>)
 8000e88:	4c0a      	ldr	r4, [pc, #40]	; (8000eb4 <__libc_init_array+0x44>)
 8000e8a:	1b64      	subs	r4, r4, r5
 8000e8c:	10a4      	asrs	r4, r4, #2
 8000e8e:	42a6      	cmp	r6, r4
 8000e90:	d105      	bne.n	8000e9e <__libc_init_array+0x2e>
 8000e92:	bd70      	pop	{r4, r5, r6, pc}
 8000e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e98:	4798      	blx	r3
 8000e9a:	3601      	adds	r6, #1
 8000e9c:	e7ee      	b.n	8000e7c <__libc_init_array+0xc>
 8000e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ea2:	4798      	blx	r3
 8000ea4:	3601      	adds	r6, #1
 8000ea6:	e7f2      	b.n	8000e8e <__libc_init_array+0x1e>
 8000ea8:	08000f18 	.word	0x08000f18
 8000eac:	08000f18 	.word	0x08000f18
 8000eb0:	08000f18 	.word	0x08000f18
 8000eb4:	08000f1c 	.word	0x08000f1c

08000eb8 <_init>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr

08000ec4 <_fini>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr
